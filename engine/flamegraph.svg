<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="3865"><g><title>engine`DYLD-STUB$$calloc (1 samples, 0.03%)</title><rect x="0.0000%" y="181" width="0.0259%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>engine`DYLD-STUB$$free (2 samples, 0.05%)</title><rect x="0.0259%" y="181" width="0.0517%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2759%" y="191.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (3 samples, 0.08%)</title><rect x="0.1552%" y="117" width="0.0776%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="3"/><text x="0.4052%" y="127.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (2 samples, 0.05%)</title><rect x="0.1811%" y="101" width="0.0517%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="2"/><text x="0.4311%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$free (2 samples, 0.05%)</title><rect x="0.9832%" y="101" width="0.0517%" height="15" fill="rgb(208,68,35)" fg:x="38" fg:w="2"/><text x="1.2332%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="1.0349%" y="101" width="0.0259%" height="15" fill="rgb(232,128,0)" fg:x="40" fg:w="1"/><text x="1.2849%" y="111.50"></text></g><g><title>engine`__rdl_alloc (1 samples, 0.03%)</title><rect x="1.0608%" y="101" width="0.0259%" height="15" fill="rgb(207,160,47)" fg:x="41" fg:w="1"/><text x="1.3108%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (58 samples, 1.50%)</title><rect x="1.0867%" y="101" width="1.5006%" height="15" fill="rgb(228,23,34)" fg:x="42" fg:w="58"/><text x="1.3367%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (26 samples, 0.67%)</title><rect x="1.9146%" y="85" width="0.6727%" height="15" fill="rgb(218,30,26)" fg:x="74" fg:w="26"/><text x="2.1646%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (760 samples, 19.66%)</title><rect x="23.6999%" y="85" width="19.6636%" height="15" fill="rgb(220,122,19)" fg:x="916" fg:w="760"/><text x="23.9499%" y="95.50">engine`engine::moves::attacked:..</text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (638 samples, 16.51%)</title><rect x="26.8564%" y="69" width="16.5071%" height="15" fill="rgb(250,228,42)" fg:x="1038" fg:w="638"/><text x="27.1064%" y="79.50">engine`engine::moves::att..</text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (39 samples, 1.01%)</title><rect x="43.6740%" y="69" width="1.0091%" height="15" fill="rgb(240,193,28)" fg:x="1688" fg:w="39"/><text x="43.9240%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (61 samples, 1.58%)</title><rect x="44.6831%" y="69" width="1.5783%" height="15" fill="rgb(216,20,37)" fg:x="1727" fg:w="61"/><text x="44.9331%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (65 samples, 1.68%)</title><rect x="46.2613%" y="69" width="1.6818%" height="15" fill="rgb(206,188,39)" fg:x="1788" fg:w="65"/><text x="46.5113%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (182 samples, 4.71%)</title><rect x="47.9431%" y="69" width="4.7089%" height="15" fill="rgb(217,207,13)" fg:x="1853" fg:w="182"/><text x="48.1931%" y="79.50">engin..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (94 samples, 2.43%)</title><rect x="50.2199%" y="53" width="2.4321%" height="15" fill="rgb(231,73,38)" fg:x="1941" fg:w="94"/><text x="50.4699%" y="63.50">en..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (20 samples, 0.52%)</title><rect x="52.6520%" y="69" width="0.5175%" height="15" fill="rgb(225,20,46)" fg:x="2035" fg:w="20"/><text x="52.9020%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (81 samples, 2.10%)</title><rect x="53.1695%" y="69" width="2.0957%" height="15" fill="rgb(210,31,41)" fg:x="2055" fg:w="81"/><text x="53.4195%" y="79.50">e..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (93 samples, 2.41%)</title><rect x="55.2652%" y="69" width="2.4062%" height="15" fill="rgb(221,200,47)" fg:x="2136" fg:w="93"/><text x="55.5152%" y="79.50">en..</text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (35 samples, 0.91%)</title><rect x="57.6714%" y="69" width="0.9056%" height="15" fill="rgb(226,26,5)" fg:x="2229" fg:w="35"/><text x="57.9214%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (617 samples, 15.96%)</title><rect x="43.3635%" y="85" width="15.9638%" height="15" fill="rgb(249,33,26)" fg:x="1676" fg:w="617"/><text x="43.6135%" y="95.50">engine`engine::moves::pse..</text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (29 samples, 0.75%)</title><rect x="58.5770%" y="69" width="0.7503%" height="15" fill="rgb(235,183,28)" fg:x="2264" fg:w="29"/><text x="58.8270%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (3 samples, 0.08%)</title><rect x="59.3273%" y="85" width="0.0776%" height="15" fill="rgb(221,5,38)" fg:x="2293" fg:w="3"/><text x="59.5773%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (41 samples, 1.06%)</title><rect x="59.4049%" y="85" width="1.0608%" height="15" fill="rgb(247,18,42)" fg:x="2296" fg:w="41"/><text x="59.6549%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (31 samples, 0.80%)</title><rect x="59.6636%" y="69" width="0.8021%" height="15" fill="rgb(241,131,45)" fg:x="2306" fg:w="31"/><text x="59.9136%" y="79.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (26 samples, 0.67%)</title><rect x="59.7930%" y="53" width="0.6727%" height="15" fill="rgb(249,31,29)" fg:x="2311" fg:w="26"/><text x="60.0430%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (5 samples, 0.13%)</title><rect x="60.4657%" y="85" width="0.1294%" height="15" fill="rgb(225,111,53)" fg:x="2337" fg:w="5"/><text x="60.7157%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (7 samples, 0.18%)</title><rect x="60.5951%" y="85" width="0.1811%" height="15" fill="rgb(238,160,17)" fg:x="2342" fg:w="7"/><text x="60.8451%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (4 samples, 0.10%)</title><rect x="60.7762%" y="85" width="0.1035%" height="15" fill="rgb(214,148,48)" fg:x="2349" fg:w="4"/><text x="61.0262%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (6 samples, 0.16%)</title><rect x="60.8797%" y="85" width="0.1552%" height="15" fill="rgb(232,36,49)" fg:x="2353" fg:w="6"/><text x="61.1297%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (5 samples, 0.13%)</title><rect x="61.0349%" y="85" width="0.1294%" height="15" fill="rgb(209,103,24)" fg:x="2359" fg:w="5"/><text x="61.2849%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (6 samples, 0.16%)</title><rect x="61.1643%" y="85" width="0.1552%" height="15" fill="rgb(229,88,8)" fg:x="2364" fg:w="6"/><text x="61.4143%" y="95.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (770 samples, 19.92%)</title><rect x="61.3195%" y="85" width="19.9224%" height="15" fill="rgb(213,181,19)" fg:x="2370" fg:w="770"/><text x="61.5695%" y="95.50">engine`engine::state::game::Gam..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="81.2419%" y="85" width="0.0517%" height="15" fill="rgb(254,191,54)" fg:x="3140" fg:w="2"/><text x="81.4919%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.18%)</title><rect x="81.2937%" y="85" width="0.1811%" height="15" fill="rgb(241,83,37)" fg:x="3142" fg:w="7"/><text x="81.5437%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (22 samples, 0.57%)</title><rect x="81.4748%" y="85" width="0.5692%" height="15" fill="rgb(233,36,39)" fg:x="3149" fg:w="22"/><text x="81.7248%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="82.0440%" y="85" width="0.0259%" height="15" fill="rgb(226,3,54)" fg:x="3171" fg:w="1"/><text x="82.2940%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (16 samples, 0.41%)</title><rect x="82.1475%" y="69" width="0.4140%" height="15" fill="rgb(245,192,40)" fg:x="3175" fg:w="16"/><text x="82.3975%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.05%)</title><rect x="82.6908%" y="53" width="0.0517%" height="15" fill="rgb(238,167,29)" fg:x="3196" fg:w="2"/><text x="82.9408%" y="63.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,101 samples, 80.23%)</title><rect x="2.5873%" y="101" width="80.2329%" height="15" fill="rgb(232,182,51)" fg:x="100" fg:w="3101"/><text x="2.8373%" y="111.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (29 samples, 0.75%)</title><rect x="82.0699%" y="85" width="0.7503%" height="15" fill="rgb(231,60,39)" fg:x="3172" fg:w="29"/><text x="82.3199%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.26%)</title><rect x="82.5614%" y="69" width="0.2587%" height="15" fill="rgb(208,69,12)" fg:x="3191" fg:w="10"/><text x="82.8114%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.08%)</title><rect x="82.7426%" y="53" width="0.0776%" height="15" fill="rgb(235,93,37)" fg:x="3198" fg:w="3"/><text x="82.9926%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.05%)</title><rect x="82.7684%" y="37" width="0.0517%" height="15" fill="rgb(213,116,39)" fg:x="3199" fg:w="2"/><text x="83.0184%" y="47.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (2 samples, 0.05%)</title><rect x="82.8202%" y="85" width="0.0517%" height="15" fill="rgb(222,207,29)" fg:x="3201" fg:w="2"/><text x="83.0702%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (4 samples, 0.10%)</title><rect x="82.8719%" y="85" width="0.1035%" height="15" fill="rgb(206,96,30)" fg:x="3203" fg:w="4"/><text x="83.1219%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (5 samples, 0.13%)</title><rect x="82.9754%" y="85" width="0.1294%" height="15" fill="rgb(218,138,4)" fg:x="3207" fg:w="5"/><text x="83.2254%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (4 samples, 0.10%)</title><rect x="83.0013%" y="69" width="0.1035%" height="15" fill="rgb(250,191,14)" fg:x="3208" fg:w="4"/><text x="83.2513%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (1 samples, 0.03%)</title><rect x="83.1048%" y="85" width="0.0259%" height="15" fill="rgb(239,60,40)" fg:x="3212" fg:w="1"/><text x="83.3548%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (5 samples, 0.13%)</title><rect x="83.1307%" y="85" width="0.1294%" height="15" fill="rgb(206,27,48)" fg:x="3213" fg:w="5"/><text x="83.3807%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (6 samples, 0.16%)</title><rect x="83.2600%" y="85" width="0.1552%" height="15" fill="rgb(225,35,8)" fg:x="3218" fg:w="6"/><text x="83.5100%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (26 samples, 0.67%)</title><rect x="82.8202%" y="101" width="0.6727%" height="15" fill="rgb(250,213,24)" fg:x="3201" fg:w="26"/><text x="83.0702%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (3 samples, 0.08%)</title><rect x="83.4153%" y="85" width="0.0776%" height="15" fill="rgb(247,123,22)" fg:x="3224" fg:w="3"/><text x="83.6653%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (1 samples, 0.03%)</title><rect x="83.4929%" y="101" width="0.0259%" height="15" fill="rgb(231,138,38)" fg:x="3227" fg:w="1"/><text x="83.7429%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (1 samples, 0.03%)</title><rect x="83.5188%" y="101" width="0.0259%" height="15" fill="rgb(231,145,46)" fg:x="3228" fg:w="1"/><text x="83.7688%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (1 samples, 0.03%)</title><rect x="83.5446%" y="101" width="0.0259%" height="15" fill="rgb(251,118,11)" fg:x="3229" fg:w="1"/><text x="83.7946%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (161 samples, 4.17%)</title><rect x="83.5705%" y="101" width="4.1656%" height="15" fill="rgb(217,147,25)" fg:x="3230" fg:w="161"/><text x="83.8205%" y="111.50">engin..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.26%)</title><rect x="87.7361%" y="101" width="0.2587%" height="15" fill="rgb(247,81,37)" fg:x="3391" fg:w="10"/><text x="87.9861%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.13%)</title><rect x="87.9948%" y="101" width="0.1294%" height="15" fill="rgb(209,12,38)" fg:x="3401" fg:w="5"/><text x="88.2448%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.13%)</title><rect x="88.1242%" y="101" width="0.1294%" height="15" fill="rgb(227,1,9)" fg:x="3406" fg:w="5"/><text x="88.3742%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.23%)</title><rect x="88.2536%" y="101" width="0.2329%" height="15" fill="rgb(248,47,43)" fg:x="3411" fg:w="9"/><text x="88.5036%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.08%)</title><rect x="88.4864%" y="101" width="0.0776%" height="15" fill="rgb(221,10,30)" fg:x="3420" fg:w="3"/><text x="88.7364%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="88.5382%" y="85" width="0.0259%" height="15" fill="rgb(210,229,1)" fg:x="3422" fg:w="1"/><text x="88.7882%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="88.5640%" y="101" width="0.0517%" height="15" fill="rgb(222,148,37)" fg:x="3423" fg:w="2"/><text x="88.8140%" y="111.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,419 samples, 88.46%)</title><rect x="0.2329%" y="117" width="88.4605%" height="15" fill="rgb(234,67,33)" fg:x="9" fg:w="3419"/><text x="0.4829%" y="127.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.08%)</title><rect x="88.6158%" y="101" width="0.0776%" height="15" fill="rgb(247,98,35)" fg:x="3425" fg:w="3"/><text x="88.8658%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (1 samples, 0.03%)</title><rect x="88.6934%" y="117" width="0.0259%" height="15" fill="rgb(247,138,52)" fg:x="3428" fg:w="1"/><text x="88.9434%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (1 samples, 0.03%)</title><rect x="88.6934%" y="101" width="0.0259%" height="15" fill="rgb(213,79,30)" fg:x="3428" fg:w="1"/><text x="88.9434%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (5 samples, 0.13%)</title><rect x="88.7193%" y="117" width="0.1294%" height="15" fill="rgb(246,177,23)" fg:x="3429" fg:w="5"/><text x="88.9693%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="88.8486%" y="117" width="0.0259%" height="15" fill="rgb(230,62,27)" fg:x="3434" fg:w="1"/><text x="89.0986%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="88.8745%" y="117" width="0.0259%" height="15" fill="rgb(216,154,8)" fg:x="3435" fg:w="1"/><text x="89.1245%" y="127.50"></text></g><g><title>engine`engine::moves::perft::perft (3,434 samples, 88.85%)</title><rect x="0.0776%" y="181" width="88.8486%" height="15" fill="rgb(244,35,45)" fg:x="3" fg:w="3434"/><text x="0.3276%" y="191.50">engine`engine::moves::perft::perft</text></g><g><title>engine`engine::moves::perft::_perft (3,434 samples, 88.85%)</title><rect x="0.0776%" y="165" width="88.8486%" height="15" fill="rgb(251,115,12)" fg:x="3" fg:w="3434"/><text x="0.3276%" y="175.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (3,434 samples, 88.85%)</title><rect x="0.0776%" y="149" width="88.8486%" height="15" fill="rgb(240,54,50)" fg:x="3" fg:w="3434"/><text x="0.3276%" y="159.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (3,434 samples, 88.85%)</title><rect x="0.0776%" y="133" width="88.8486%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="3434"/><text x="0.3276%" y="143.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="88.9004%" y="117" width="0.0259%" height="15" fill="rgb(207,117,47)" fg:x="3436" fg:w="1"/><text x="89.1504%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="89.2885%" y="165" width="0.0259%" height="15" fill="rgb(249,43,39)" fg:x="3451" fg:w="1"/><text x="89.5385%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.05%)</title><rect x="89.3144%" y="165" width="0.0517%" height="15" fill="rgb(209,38,44)" fg:x="3452" fg:w="2"/><text x="89.5644%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="89.3661%" y="165" width="0.0259%" height="15" fill="rgb(236,212,23)" fg:x="3454" fg:w="1"/><text x="89.6161%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.03%)</title><rect x="89.3920%" y="165" width="0.0259%" height="15" fill="rgb(242,79,21)" fg:x="3455" fg:w="1"/><text x="89.6420%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.05%)</title><rect x="89.4179%" y="165" width="0.0517%" height="15" fill="rgb(211,96,35)" fg:x="3456" fg:w="2"/><text x="89.6679%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="89.4696%" y="149" width="0.0259%" height="15" fill="rgb(253,215,40)" fg:x="3458" fg:w="1"/><text x="89.7196%" y="159.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_bishop_magic_numbers (33 samples, 0.85%)</title><rect x="88.9263%" y="181" width="0.8538%" height="15" fill="rgb(211,81,21)" fg:x="3437" fg:w="33"/><text x="89.1763%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.31%)</title><rect x="89.4696%" y="165" width="0.3105%" height="15" fill="rgb(208,190,38)" fg:x="3458" fg:w="12"/><text x="89.7196%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.28%)</title><rect x="89.4955%" y="149" width="0.2846%" height="15" fill="rgb(235,213,38)" fg:x="3459" fg:w="11"/><text x="89.7455%" y="159.50"></text></g><g><title>engine`__rdl_alloc_zeroed (2 samples, 0.05%)</title><rect x="91.6947%" y="165" width="0.0517%" height="15" fill="rgb(237,122,38)" fg:x="3544" fg:w="2"/><text x="91.9447%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.08%)</title><rect x="91.7464%" y="165" width="0.0776%" height="15" fill="rgb(244,218,35)" fg:x="3546" fg:w="3"/><text x="91.9964%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.13%)</title><rect x="91.8241%" y="165" width="0.1294%" height="15" fill="rgb(240,68,47)" fg:x="3549" fg:w="5"/><text x="92.0741%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.05%)</title><rect x="91.9534%" y="165" width="0.0517%" height="15" fill="rgb(210,16,53)" fg:x="3554" fg:w="2"/><text x="92.2034%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.08%)</title><rect x="92.1087%" y="149" width="0.0776%" height="15" fill="rgb(235,124,12)" fg:x="3560" fg:w="3"/><text x="92.3587%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.13%)</title><rect x="92.1863%" y="149" width="0.1294%" height="15" fill="rgb(224,169,11)" fg:x="3563" fg:w="5"/><text x="92.4363%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (39 samples, 1.01%)</title><rect x="92.3157%" y="149" width="1.0091%" height="15" fill="rgb(250,166,2)" fg:x="3568" fg:w="39"/><text x="92.5657%" y="159.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_rook_magic_numbers (370 samples, 9.57%)</title><rect x="89.7801%" y="181" width="9.5731%" height="15" fill="rgb(242,216,29)" fg:x="3470" fg:w="370"/><text x="90.0301%" y="191.50">engine`engine:..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (284 samples, 7.35%)</title><rect x="92.0052%" y="165" width="7.3480%" height="15" fill="rgb(230,116,27)" fg:x="3556" fg:w="284"/><text x="92.2552%" y="175.50">libsystem_..</text></g><g><title>libsystem_platform.dylib`_platform_memset (233 samples, 6.03%)</title><rect x="93.3247%" y="149" width="6.0285%" height="15" fill="rgb(228,99,48)" fg:x="3607" fg:w="233"/><text x="93.5747%" y="159.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (9 samples, 0.23%)</title><rect x="99.3532%" y="181" width="0.2329%" height="15" fill="rgb(253,11,6)" fg:x="3840" fg:w="9"/><text x="99.6032%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.10%)</title><rect x="99.5860%" y="181" width="0.1035%" height="15" fill="rgb(247,143,39)" fg:x="3849" fg:w="4"/><text x="99.8360%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.18%)</title><rect x="99.6895%" y="181" width="0.1811%" height="15" fill="rgb(236,97,10)" fg:x="3853" fg:w="7"/><text x="99.9395%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.08%)</title><rect x="99.8706%" y="181" width="0.0776%" height="15" fill="rgb(233,208,19)" fg:x="3860" fg:w="3"/><text x="100.1206%" y="191.50"></text></g><g><title>dyld`start (3,864 samples, 99.97%)</title><rect x="0.0000%" y="293" width="99.9741%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="3864"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>engine`main (3,864 samples, 99.97%)</title><rect x="0.0000%" y="277" width="99.9741%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="3864"/><text x="0.2500%" y="287.50">engine`main</text></g><g><title>engine`std::rt::lang_start (3,864 samples, 99.97%)</title><rect x="0.0000%" y="261" width="99.9741%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="3864"/><text x="0.2500%" y="271.50">engine`std::rt::lang_start</text></g><g><title>engine`std::rt::lang_start_internal (3,864 samples, 99.97%)</title><rect x="0.0000%" y="245" width="99.9741%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="3864"/><text x="0.2500%" y="255.50">engine`std::rt::lang_start_internal</text></g><g><title>engine`std::rt::lang_start::_{{closure}} (3,864 samples, 99.97%)</title><rect x="0.0000%" y="229" width="99.9741%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="3864"/><text x="0.2500%" y="239.50">engine`std::rt::lang_start::_{{closure}}</text></g><g><title>engine`std::sys_common::backtrace::__rust_begin_short_backtrace (3,864 samples, 99.97%)</title><rect x="0.0000%" y="213" width="99.9741%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="3864"/><text x="0.2500%" y="223.50">engine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>engine`engine::main (3,864 samples, 99.97%)</title><rect x="0.0000%" y="197" width="99.9741%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="3864"/><text x="0.2500%" y="207.50">engine`engine::main</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="99.9483%" y="181" width="0.0259%" height="15" fill="rgb(232,23,21)" fg:x="3863" fg:w="1"/><text x="100.1983%" y="191.50"></text></g><g><title>all (3,865 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="3865"/><text x="0.2500%" y="319.50"></text></g><g><title>engine`main (1 samples, 0.03%)</title><rect x="99.9741%" y="293" width="0.0259%" height="15" fill="rgb(226,81,46)" fg:x="3864" fg:w="1"/><text x="100.2241%" y="303.50"></text></g></svg></svg>