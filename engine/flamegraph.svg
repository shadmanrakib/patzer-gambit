<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="8550"><g><title>engine`DYLD-STUB$$calloc (2 samples, 0.02%)</title><rect x="0.0000%" y="197" width="0.0234%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="207.50"></text></g><g><title>engine`DYLD-STUB$$free (6 samples, 0.07%)</title><rect x="0.0234%" y="197" width="0.0702%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="6"/><text x="0.2734%" y="207.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (5 samples, 0.06%)</title><rect x="1.6608%" y="117" width="0.0585%" height="15" fill="rgb(221,193,54)" fg:x="142" fg:w="5"/><text x="1.9108%" y="127.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (2 samples, 0.02%)</title><rect x="1.6959%" y="101" width="0.0234%" height="15" fill="rgb(248,212,6)" fg:x="145" fg:w="2"/><text x="1.9459%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="2.2456%" y="101" width="0.0234%" height="15" fill="rgb(208,68,35)" fg:x="192" fg:w="2"/><text x="2.4956%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$malloc (3 samples, 0.04%)</title><rect x="2.2690%" y="101" width="0.0351%" height="15" fill="rgb(232,128,0)" fg:x="194" fg:w="3"/><text x="2.5190%" y="111.50"></text></g><g><title>engine`__rdl_alloc (3 samples, 0.04%)</title><rect x="2.3041%" y="101" width="0.0351%" height="15" fill="rgb(207,160,47)" fg:x="197" fg:w="3"/><text x="2.5541%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (79 samples, 0.92%)</title><rect x="2.3392%" y="101" width="0.9240%" height="15" fill="rgb(228,23,34)" fg:x="200" fg:w="79"/><text x="2.5892%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (37 samples, 0.43%)</title><rect x="2.8304%" y="85" width="0.4327%" height="15" fill="rgb(218,30,26)" fg:x="242" fg:w="37"/><text x="3.0804%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (799 samples, 9.35%)</title><rect x="14.1871%" y="85" width="9.3450%" height="15" fill="rgb(220,122,19)" fg:x="1213" fg:w="799"/><text x="14.4371%" y="95.50">engine`engine..</text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (656 samples, 7.67%)</title><rect x="15.8596%" y="69" width="7.6725%" height="15" fill="rgb(250,228,42)" fg:x="1356" fg:w="656"/><text x="16.1096%" y="79.50">engine`engi..</text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (29 samples, 0.34%)</title><rect x="24.1988%" y="69" width="0.3392%" height="15" fill="rgb(240,193,28)" fg:x="2069" fg:w="29"/><text x="24.4488%" y="79.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (28 samples, 0.33%)</title><rect x="24.2105%" y="53" width="0.3275%" height="15" fill="rgb(216,20,37)" fg:x="2070" fg:w="28"/><text x="24.4605%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (64 samples, 0.75%)</title><rect x="24.5380%" y="69" width="0.7485%" height="15" fill="rgb(206,188,39)" fg:x="2098" fg:w="64"/><text x="24.7880%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (67 samples, 0.78%)</title><rect x="25.2865%" y="69" width="0.7836%" height="15" fill="rgb(217,207,13)" fg:x="2162" fg:w="67"/><text x="25.5365%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (69 samples, 0.81%)</title><rect x="26.0702%" y="69" width="0.8070%" height="15" fill="rgb(231,73,38)" fg:x="2229" fg:w="69"/><text x="26.3202%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (181 samples, 2.12%)</title><rect x="26.8772%" y="69" width="2.1170%" height="15" fill="rgb(225,20,46)" fg:x="2298" fg:w="181"/><text x="27.1272%" y="79.50">e..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (77 samples, 0.90%)</title><rect x="28.0936%" y="53" width="0.9006%" height="15" fill="rgb(210,31,41)" fg:x="2402" fg:w="77"/><text x="28.3436%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (31 samples, 0.36%)</title><rect x="28.9942%" y="69" width="0.3626%" height="15" fill="rgb(221,200,47)" fg:x="2479" fg:w="31"/><text x="29.2442%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (82 samples, 0.96%)</title><rect x="29.3567%" y="69" width="0.9591%" height="15" fill="rgb(226,26,5)" fg:x="2510" fg:w="82"/><text x="29.6067%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (101 samples, 1.18%)</title><rect x="30.3158%" y="69" width="1.1813%" height="15" fill="rgb(249,33,26)" fg:x="2592" fg:w="101"/><text x="30.5658%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (723 samples, 8.46%)</title><rect x="23.5322%" y="85" width="8.4561%" height="15" fill="rgb(235,183,28)" fg:x="2012" fg:w="723"/><text x="23.7822%" y="95.50">engine`engin..</text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (42 samples, 0.49%)</title><rect x="31.4971%" y="69" width="0.4912%" height="15" fill="rgb(221,5,38)" fg:x="2693" fg:w="42"/><text x="31.7471%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (2 samples, 0.02%)</title><rect x="31.9883%" y="85" width="0.0234%" height="15" fill="rgb(247,18,42)" fg:x="2735" fg:w="2"/><text x="32.2383%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (4 samples, 0.05%)</title><rect x="32.0117%" y="85" width="0.0468%" height="15" fill="rgb(241,131,45)" fg:x="2737" fg:w="4"/><text x="32.2617%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (7 samples, 0.08%)</title><rect x="32.0585%" y="85" width="0.0819%" height="15" fill="rgb(249,31,29)" fg:x="2741" fg:w="7"/><text x="32.3085%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (1 samples, 0.01%)</title><rect x="32.1404%" y="85" width="0.0117%" height="15" fill="rgb(225,111,53)" fg:x="2748" fg:w="1"/><text x="32.3904%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (2 samples, 0.02%)</title><rect x="32.1520%" y="85" width="0.0234%" height="15" fill="rgb(238,160,17)" fg:x="2749" fg:w="2"/><text x="32.4020%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (5 samples, 0.06%)</title><rect x="32.1754%" y="85" width="0.0585%" height="15" fill="rgb(214,148,48)" fg:x="2751" fg:w="5"/><text x="32.4254%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (6 samples, 0.07%)</title><rect x="32.2339%" y="85" width="0.0702%" height="15" fill="rgb(232,36,49)" fg:x="2756" fg:w="6"/><text x="32.4839%" y="95.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (252 samples, 2.95%)</title><rect x="32.3041%" y="85" width="2.9474%" height="15" fill="rgb(209,103,24)" fg:x="2762" fg:w="252"/><text x="32.5541%" y="95.50">en..</text></g><g><title>engine`engine::state::game::GameState::make_move (723 samples, 8.46%)</title><rect x="35.2515%" y="85" width="8.4561%" height="15" fill="rgb(229,88,8)" fg:x="3014" fg:w="723"/><text x="35.5015%" y="95.50">engine`engin..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.04%)</title><rect x="43.7076%" y="85" width="0.0351%" height="15" fill="rgb(213,181,19)" fg:x="3737" fg:w="3"/><text x="43.9576%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.07%)</title><rect x="43.7427%" y="85" width="0.0702%" height="15" fill="rgb(254,191,54)" fg:x="3740" fg:w="6"/><text x="43.9927%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (20 samples, 0.23%)</title><rect x="43.8129%" y="85" width="0.2339%" height="15" fill="rgb(241,83,37)" fg:x="3746" fg:w="20"/><text x="44.0629%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="44.0468%" y="85" width="0.0234%" height="15" fill="rgb(233,36,39)" fg:x="3766" fg:w="2"/><text x="44.2968%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (12 samples, 0.14%)</title><rect x="44.1404%" y="69" width="0.1404%" height="15" fill="rgb(226,3,54)" fg:x="3774" fg:w="12"/><text x="44.3904%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.02%)</title><rect x="44.3860%" y="37" width="0.0234%" height="15" fill="rgb(245,192,40)" fg:x="3795" fg:w="2"/><text x="44.6360%" y="47.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,519 samples, 41.16%)</title><rect x="3.2632%" y="101" width="41.1579%" height="15" fill="rgb(238,167,29)" fg:x="279" fg:w="3519"/><text x="3.5132%" y="111.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.35%)</title><rect x="44.0702%" y="85" width="0.3509%" height="15" fill="rgb(232,182,51)" fg:x="3768" fg:w="30"/><text x="44.3202%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.14%)</title><rect x="44.2807%" y="69" width="0.1404%" height="15" fill="rgb(231,60,39)" fg:x="3786" fg:w="12"/><text x="44.5307%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.06%)</title><rect x="44.3626%" y="53" width="0.0585%" height="15" fill="rgb(208,69,12)" fg:x="3793" fg:w="5"/><text x="44.6126%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="44.4094%" y="37" width="0.0117%" height="15" fill="rgb(235,93,37)" fg:x="3797" fg:w="1"/><text x="44.6594%" y="47.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (1 samples, 0.01%)</title><rect x="44.4795%" y="85" width="0.0117%" height="15" fill="rgb(213,116,39)" fg:x="3803" fg:w="1"/><text x="44.7295%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (5 samples, 0.06%)</title><rect x="44.4912%" y="85" width="0.0585%" height="15" fill="rgb(222,207,29)" fg:x="3804" fg:w="5"/><text x="44.7412%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (3 samples, 0.04%)</title><rect x="44.5497%" y="85" width="0.0351%" height="15" fill="rgb(206,96,30)" fg:x="3809" fg:w="3"/><text x="44.7997%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (1 samples, 0.01%)</title><rect x="44.5848%" y="85" width="0.0117%" height="15" fill="rgb(218,138,4)" fg:x="3812" fg:w="1"/><text x="44.8348%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (6 samples, 0.07%)</title><rect x="44.5965%" y="85" width="0.0702%" height="15" fill="rgb(250,191,14)" fg:x="3813" fg:w="6"/><text x="44.8465%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (3 samples, 0.04%)</title><rect x="44.6316%" y="69" width="0.0351%" height="15" fill="rgb(239,60,40)" fg:x="3816" fg:w="3"/><text x="44.8816%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (1 samples, 0.01%)</title><rect x="44.6667%" y="85" width="0.0117%" height="15" fill="rgb(206,27,48)" fg:x="3819" fg:w="1"/><text x="44.9167%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (3 samples, 0.04%)</title><rect x="44.6784%" y="85" width="0.0351%" height="15" fill="rgb(225,35,8)" fg:x="3820" fg:w="3"/><text x="44.9284%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (8 samples, 0.09%)</title><rect x="44.7135%" y="85" width="0.0936%" height="15" fill="rgb(250,213,24)" fg:x="3823" fg:w="8"/><text x="44.9635%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (34 samples, 0.40%)</title><rect x="44.4211%" y="101" width="0.3977%" height="15" fill="rgb(247,123,22)" fg:x="3798" fg:w="34"/><text x="44.6711%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (1 samples, 0.01%)</title><rect x="44.8070%" y="85" width="0.0117%" height="15" fill="rgb(231,138,38)" fg:x="3831" fg:w="1"/><text x="45.0570%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (2 samples, 0.02%)</title><rect x="44.8187%" y="101" width="0.0234%" height="15" fill="rgb(231,145,46)" fg:x="3832" fg:w="2"/><text x="45.0687%" y="111.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (15 samples, 0.18%)</title><rect x="44.8421%" y="101" width="0.1754%" height="15" fill="rgb(251,118,11)" fg:x="3834" fg:w="15"/><text x="45.0921%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (212 samples, 2.48%)</title><rect x="45.0175%" y="101" width="2.4795%" height="15" fill="rgb(217,147,25)" fg:x="3849" fg:w="212"/><text x="45.2675%" y="111.50">en..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (15 samples, 0.18%)</title><rect x="47.4971%" y="101" width="0.1754%" height="15" fill="rgb(247,81,37)" fg:x="4061" fg:w="15"/><text x="47.7471%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.08%)</title><rect x="47.6725%" y="101" width="0.0819%" height="15" fill="rgb(209,12,38)" fg:x="4076" fg:w="7"/><text x="47.9225%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="47.7544%" y="101" width="0.0117%" height="15" fill="rgb(227,1,9)" fg:x="4083" fg:w="1"/><text x="48.0044%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.16%)</title><rect x="47.7661%" y="101" width="0.1637%" height="15" fill="rgb(248,47,43)" fg:x="4084" fg:w="14"/><text x="48.0161%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="47.9298%" y="101" width="0.0117%" height="15" fill="rgb(221,10,30)" fg:x="4098" fg:w="1"/><text x="48.1798%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.04%)</title><rect x="47.9415%" y="101" width="0.0351%" height="15" fill="rgb(210,229,1)" fg:x="4099" fg:w="3"/><text x="48.1915%" y="111.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,959 samples, 46.30%)</title><rect x="1.7193%" y="117" width="46.3041%" height="15" fill="rgb(222,148,37)" fg:x="147" fg:w="3959"/><text x="1.9693%" y="127.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="47.9766%" y="101" width="0.0468%" height="15" fill="rgb(234,67,33)" fg:x="4102" fg:w="4"/><text x="48.2266%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="48.0117%" y="85" width="0.0117%" height="15" fill="rgb(247,98,35)" fg:x="4105" fg:w="1"/><text x="48.2617%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (1 samples, 0.01%)</title><rect x="48.0234%" y="101" width="0.0117%" height="15" fill="rgb(247,138,52)" fg:x="4106" fg:w="1"/><text x="48.2734%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (2 samples, 0.02%)</title><rect x="48.0234%" y="117" width="0.0234%" height="15" fill="rgb(213,79,30)" fg:x="4106" fg:w="2"/><text x="48.2734%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (1 samples, 0.01%)</title><rect x="48.0351%" y="101" width="0.0117%" height="15" fill="rgb(246,177,23)" fg:x="4107" fg:w="1"/><text x="48.2851%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (4 samples, 0.05%)</title><rect x="48.0468%" y="117" width="0.0468%" height="15" fill="rgb(230,62,27)" fg:x="4108" fg:w="4"/><text x="48.2968%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="48.0936%" y="117" width="0.0117%" height="15" fill="rgb(216,154,8)" fg:x="4112" fg:w="1"/><text x="48.3436%" y="127.50"></text></g><g><title>engine`engine::moves::perft::perft (3,976 samples, 46.50%)</title><rect x="1.6140%" y="181" width="46.5029%" height="15" fill="rgb(244,35,45)" fg:x="138" fg:w="3976"/><text x="1.8640%" y="191.50">engine`engine::moves::perft::perft</text></g><g><title>engine`engine::moves::perft::_perft (3,976 samples, 46.50%)</title><rect x="1.6140%" y="165" width="46.5029%" height="15" fill="rgb(251,115,12)" fg:x="138" fg:w="3976"/><text x="1.8640%" y="175.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (3,976 samples, 46.50%)</title><rect x="1.6140%" y="149" width="46.5029%" height="15" fill="rgb(240,54,50)" fg:x="138" fg:w="3976"/><text x="1.8640%" y="159.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (3,976 samples, 46.50%)</title><rect x="1.6140%" y="133" width="46.5029%" height="15" fill="rgb(233,84,52)" fg:x="138" fg:w="3976"/><text x="1.8640%" y="143.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="48.1053%" y="117" width="0.0117%" height="15" fill="rgb(207,117,47)" fg:x="4113" fg:w="1"/><text x="48.3553%" y="127.50"></text></g><g><title>engine`engine::moves::move_data::MoveItem::pure_algebraic_coordinate_notation (1 samples, 0.01%)</title><rect x="48.1170%" y="165" width="0.0117%" height="15" fill="rgb(249,43,39)" fg:x="4114" fg:w="1"/><text x="48.3670%" y="175.50"></text></g><g><title>engine`alloc::fmt::format::format_inner (1 samples, 0.01%)</title><rect x="48.1170%" y="149" width="0.0117%" height="15" fill="rgb(209,38,44)" fg:x="4114" fg:w="1"/><text x="48.3670%" y="159.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (3 samples, 0.04%)</title><rect x="48.1404%" y="117" width="0.0351%" height="15" fill="rgb(236,212,23)" fg:x="4116" fg:w="3"/><text x="48.3904%" y="127.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (1 samples, 0.01%)</title><rect x="48.1637%" y="101" width="0.0117%" height="15" fill="rgb(242,79,21)" fg:x="4118" fg:w="1"/><text x="48.4137%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$free (4 samples, 0.05%)</title><rect x="48.6433%" y="101" width="0.0468%" height="15" fill="rgb(211,96,35)" fg:x="4159" fg:w="4"/><text x="48.8933%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="48.6901%" y="101" width="0.0117%" height="15" fill="rgb(253,215,40)" fg:x="4163" fg:w="1"/><text x="48.9401%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (57 samples, 0.67%)</title><rect x="48.7018%" y="101" width="0.6667%" height="15" fill="rgb(211,81,21)" fg:x="4164" fg:w="57"/><text x="48.9518%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (19 samples, 0.22%)</title><rect x="49.1462%" y="85" width="0.2222%" height="15" fill="rgb(208,190,38)" fg:x="4202" fg:w="19"/><text x="49.3962%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (754 samples, 8.82%)</title><rect x="60.3626%" y="85" width="8.8187%" height="15" fill="rgb(235,213,38)" fg:x="5161" fg:w="754"/><text x="60.6126%" y="95.50">engine`engin..</text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (600 samples, 7.02%)</title><rect x="62.1637%" y="69" width="7.0175%" height="15" fill="rgb(237,122,38)" fg:x="5315" fg:w="600"/><text x="62.4137%" y="79.50">engine`en..</text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (1 samples, 0.01%)</title><rect x="69.1813%" y="85" width="0.0117%" height="15" fill="rgb(244,218,35)" fg:x="5915" fg:w="1"/><text x="69.4313%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (41 samples, 0.48%)</title><rect x="70.0585%" y="69" width="0.4795%" height="15" fill="rgb(240,68,47)" fg:x="5990" fg:w="41"/><text x="70.3085%" y="79.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (36 samples, 0.42%)</title><rect x="70.1170%" y="53" width="0.4211%" height="15" fill="rgb(210,16,53)" fg:x="5995" fg:w="36"/><text x="70.3670%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (73 samples, 0.85%)</title><rect x="70.5380%" y="69" width="0.8538%" height="15" fill="rgb(235,124,12)" fg:x="6031" fg:w="73"/><text x="70.7880%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (67 samples, 0.78%)</title><rect x="71.3918%" y="69" width="0.7836%" height="15" fill="rgb(224,169,11)" fg:x="6104" fg:w="67"/><text x="71.6418%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (72 samples, 0.84%)</title><rect x="72.1754%" y="69" width="0.8421%" height="15" fill="rgb(250,166,2)" fg:x="6171" fg:w="72"/><text x="72.4254%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (192 samples, 2.25%)</title><rect x="73.0175%" y="69" width="2.2456%" height="15" fill="rgb(242,216,29)" fg:x="6243" fg:w="192"/><text x="73.2675%" y="79.50">e..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (76 samples, 0.89%)</title><rect x="74.3743%" y="53" width="0.8889%" height="15" fill="rgb(230,116,27)" fg:x="6359" fg:w="76"/><text x="74.6243%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (44 samples, 0.51%)</title><rect x="75.2632%" y="69" width="0.5146%" height="15" fill="rgb(228,99,48)" fg:x="6435" fg:w="44"/><text x="75.5132%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (66 samples, 0.77%)</title><rect x="75.7778%" y="69" width="0.7719%" height="15" fill="rgb(253,11,6)" fg:x="6479" fg:w="66"/><text x="76.0278%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (111 samples, 1.30%)</title><rect x="76.5497%" y="69" width="1.2982%" height="15" fill="rgb(247,143,39)" fg:x="6545" fg:w="111"/><text x="76.7997%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (778 samples, 9.10%)</title><rect x="69.1930%" y="85" width="9.0994%" height="15" fill="rgb(236,97,10)" fg:x="5916" fg:w="778"/><text x="69.4430%" y="95.50">engine`engine..</text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (38 samples, 0.44%)</title><rect x="77.8480%" y="69" width="0.4444%" height="15" fill="rgb(233,208,19)" fg:x="6656" fg:w="38"/><text x="78.0980%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (2 samples, 0.02%)</title><rect x="78.2924%" y="85" width="0.0234%" height="15" fill="rgb(216,164,2)" fg:x="6694" fg:w="2"/><text x="78.5424%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (5 samples, 0.06%)</title><rect x="78.3158%" y="85" width="0.0585%" height="15" fill="rgb(220,129,5)" fg:x="6696" fg:w="5"/><text x="78.5658%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (1 samples, 0.01%)</title><rect x="78.3743%" y="85" width="0.0117%" height="15" fill="rgb(242,17,10)" fg:x="6701" fg:w="1"/><text x="78.6243%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (3 samples, 0.04%)</title><rect x="78.3860%" y="85" width="0.0351%" height="15" fill="rgb(242,107,0)" fg:x="6702" fg:w="3"/><text x="78.6360%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (8 samples, 0.09%)</title><rect x="78.4211%" y="85" width="0.0936%" height="15" fill="rgb(251,28,31)" fg:x="6705" fg:w="8"/><text x="78.6711%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (6 samples, 0.07%)</title><rect x="78.5146%" y="85" width="0.0702%" height="15" fill="rgb(233,223,10)" fg:x="6713" fg:w="6"/><text x="78.7646%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (1 samples, 0.01%)</title><rect x="78.5848%" y="85" width="0.0117%" height="15" fill="rgb(215,21,27)" fg:x="6719" fg:w="1"/><text x="78.8348%" y="95.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (271 samples, 3.17%)</title><rect x="78.5965%" y="85" width="3.1696%" height="15" fill="rgb(232,23,21)" fg:x="6720" fg:w="271"/><text x="78.8465%" y="95.50">eng..</text></g><g><title>engine`engine::state::game::GameState::make_move (748 samples, 8.75%)</title><rect x="81.7661%" y="85" width="8.7485%" height="15" fill="rgb(244,5,23)" fg:x="6991" fg:w="748"/><text x="82.0161%" y="95.50">engine`engin..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="90.5146%" y="85" width="0.0117%" height="15" fill="rgb(226,81,46)" fg:x="7739" fg:w="1"/><text x="90.7646%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.05%)</title><rect x="90.5263%" y="85" width="0.0468%" height="15" fill="rgb(247,70,30)" fg:x="7740" fg:w="4"/><text x="90.7763%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (17 samples, 0.20%)</title><rect x="90.5731%" y="85" width="0.1988%" height="15" fill="rgb(212,68,19)" fg:x="7744" fg:w="17"/><text x="90.8231%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (15 samples, 0.18%)</title><rect x="90.8304%" y="69" width="0.1754%" height="15" fill="rgb(240,187,13)" fg:x="7766" fg:w="15"/><text x="91.0804%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.02%)</title><rect x="91.0175%" y="37" width="0.0234%" height="15" fill="rgb(223,113,26)" fg:x="7782" fg:w="2"/><text x="91.2675%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (2 samples, 0.02%)</title><rect x="91.0409%" y="37" width="0.0234%" height="15" fill="rgb(206,192,2)" fg:x="7784" fg:w="2"/><text x="91.2909%" y="47.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,567 samples, 41.72%)</title><rect x="49.3684%" y="101" width="41.7193%" height="15" fill="rgb(241,108,4)" fg:x="4221" fg:w="3567"/><text x="49.6184%" y="111.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.32%)</title><rect x="90.7719%" y="85" width="0.3158%" height="15" fill="rgb(247,173,49)" fg:x="7761" fg:w="27"/><text x="91.0219%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.08%)</title><rect x="91.0058%" y="69" width="0.0819%" height="15" fill="rgb(224,114,35)" fg:x="7781" fg:w="7"/><text x="91.2558%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (7 samples, 0.08%)</title><rect x="91.0058%" y="53" width="0.0819%" height="15" fill="rgb(245,159,27)" fg:x="7781" fg:w="7"/><text x="91.2558%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (2 samples, 0.02%)</title><rect x="91.0643%" y="37" width="0.0234%" height="15" fill="rgb(245,172,44)" fg:x="7786" fg:w="2"/><text x="91.3143%" y="47.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (1 samples, 0.01%)</title><rect x="91.1930%" y="85" width="0.0117%" height="15" fill="rgb(236,23,11)" fg:x="7797" fg:w="1"/><text x="91.4430%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (1 samples, 0.01%)</title><rect x="91.1930%" y="69" width="0.0117%" height="15" fill="rgb(205,117,38)" fg:x="7797" fg:w="1"/><text x="91.4430%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (2 samples, 0.02%)</title><rect x="91.2047%" y="85" width="0.0234%" height="15" fill="rgb(237,72,25)" fg:x="7798" fg:w="2"/><text x="91.4547%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (3 samples, 0.04%)</title><rect x="91.2281%" y="85" width="0.0351%" height="15" fill="rgb(244,70,9)" fg:x="7800" fg:w="3"/><text x="91.4781%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (2 samples, 0.02%)</title><rect x="91.2632%" y="85" width="0.0234%" height="15" fill="rgb(217,125,39)" fg:x="7803" fg:w="2"/><text x="91.5132%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (6 samples, 0.07%)</title><rect x="91.2865%" y="85" width="0.0702%" height="15" fill="rgb(235,36,10)" fg:x="7805" fg:w="6"/><text x="91.5365%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (2 samples, 0.02%)</title><rect x="91.3333%" y="69" width="0.0234%" height="15" fill="rgb(251,123,47)" fg:x="7809" fg:w="2"/><text x="91.5833%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (4 samples, 0.05%)</title><rect x="91.3567%" y="85" width="0.0468%" height="15" fill="rgb(221,13,13)" fg:x="7811" fg:w="4"/><text x="91.6067%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (3 samples, 0.04%)</title><rect x="91.4035%" y="85" width="0.0351%" height="15" fill="rgb(238,131,9)" fg:x="7815" fg:w="3"/><text x="91.6535%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (2 samples, 0.02%)</title><rect x="91.4386%" y="85" width="0.0234%" height="15" fill="rgb(211,50,8)" fg:x="7818" fg:w="2"/><text x="91.6886%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (34 samples, 0.40%)</title><rect x="91.0877%" y="101" width="0.3977%" height="15" fill="rgb(245,182,24)" fg:x="7788" fg:w="34"/><text x="91.3377%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (2 samples, 0.02%)</title><rect x="91.4620%" y="85" width="0.0234%" height="15" fill="rgb(242,14,37)" fg:x="7820" fg:w="2"/><text x="91.7120%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (1 samples, 0.01%)</title><rect x="91.4854%" y="101" width="0.0117%" height="15" fill="rgb(246,228,12)" fg:x="7822" fg:w="1"/><text x="91.7354%" y="111.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (14 samples, 0.16%)</title><rect x="91.4971%" y="101" width="0.1637%" height="15" fill="rgb(213,55,15)" fg:x="7823" fg:w="14"/><text x="91.7471%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (256 samples, 2.99%)</title><rect x="91.6608%" y="101" width="2.9942%" height="15" fill="rgb(209,9,3)" fg:x="7837" fg:w="256"/><text x="91.9108%" y="111.50">eng..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.15%)</title><rect x="94.6550%" y="101" width="0.1520%" height="15" fill="rgb(230,59,30)" fg:x="8093" fg:w="13"/><text x="94.9050%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.06%)</title><rect x="94.8070%" y="101" width="0.0585%" height="15" fill="rgb(209,121,21)" fg:x="8106" fg:w="5"/><text x="95.0570%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.06%)</title><rect x="94.8655%" y="101" width="0.0585%" height="15" fill="rgb(220,109,13)" fg:x="8111" fg:w="5"/><text x="95.1155%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.06%)</title><rect x="94.9240%" y="101" width="0.0585%" height="15" fill="rgb(232,18,1)" fg:x="8116" fg:w="5"/><text x="95.1740%" y="111.50"></text></g><g><title>engine`engine::moves::perft::_perft (4,007 samples, 46.87%)</title><rect x="48.1754%" y="117" width="46.8655%" height="15" fill="rgb(215,41,42)" fg:x="4119" fg:w="4007"/><text x="48.4254%" y="127.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.06%)</title><rect x="94.9825%" y="101" width="0.0585%" height="15" fill="rgb(224,123,36)" fg:x="8121" fg:w="5"/><text x="95.2325%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="95.0292%" y="85" width="0.0117%" height="15" fill="rgb(240,125,3)" fg:x="8125" fg:w="1"/><text x="95.2792%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (1 samples, 0.01%)</title><rect x="95.0409%" y="117" width="0.0117%" height="15" fill="rgb(205,98,50)" fg:x="8126" fg:w="1"/><text x="95.2909%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (1 samples, 0.01%)</title><rect x="95.0409%" y="101" width="0.0117%" height="15" fill="rgb(205,185,37)" fg:x="8126" fg:w="1"/><text x="95.2909%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (9 samples, 0.11%)</title><rect x="95.0526%" y="117" width="0.1053%" height="15" fill="rgb(238,207,15)" fg:x="8127" fg:w="9"/><text x="95.3026%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="95.1579%" y="117" width="0.0117%" height="15" fill="rgb(213,199,42)" fg:x="8136" fg:w="1"/><text x="95.4079%" y="127.50"></text></g><g><title>engine`engine::moves::perft::perft_unmake (4,024 samples, 47.06%)</title><rect x="48.1170%" y="181" width="47.0643%" height="15" fill="rgb(235,201,11)" fg:x="4114" fg:w="4024"/><text x="48.3670%" y="191.50">engine`engine::moves::perft::perft_unmake</text></g><g><title>engine`engine::moves::perft::_perft (4,023 samples, 47.05%)</title><rect x="48.1287%" y="165" width="47.0526%" height="15" fill="rgb(207,46,11)" fg:x="4115" fg:w="4023"/><text x="48.3787%" y="175.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (4,023 samples, 47.05%)</title><rect x="48.1287%" y="149" width="47.0526%" height="15" fill="rgb(241,35,35)" fg:x="4115" fg:w="4023"/><text x="48.3787%" y="159.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (4,023 samples, 47.05%)</title><rect x="48.1287%" y="133" width="47.0526%" height="15" fill="rgb(243,32,47)" fg:x="4115" fg:w="4023"/><text x="48.3787%" y="143.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="95.1696%" y="117" width="0.0117%" height="15" fill="rgb(247,202,23)" fg:x="8137" fg:w="1"/><text x="95.4196%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="95.1813%" y="181" width="0.0117%" height="15" fill="rgb(219,102,11)" fg:x="8138" fg:w="1"/><text x="95.4313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="95.1930%" y="181" width="0.0117%" height="15" fill="rgb(243,110,44)" fg:x="8139" fg:w="1"/><text x="95.4430%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.04%)</title><rect x="95.2047%" y="181" width="0.0351%" height="15" fill="rgb(222,74,54)" fg:x="8140" fg:w="3"/><text x="95.4547%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.16%)</title><rect x="95.2398%" y="181" width="0.1637%" height="15" fill="rgb(216,99,12)" fg:x="8143" fg:w="14"/><text x="95.4898%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="95.4035%" y="181" width="0.0117%" height="15" fill="rgb(226,22,26)" fg:x="8157" fg:w="1"/><text x="95.6535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="95.4035%" y="165" width="0.0117%" height="15" fill="rgb(217,163,10)" fg:x="8157" fg:w="1"/><text x="95.6535%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="95.4035%" y="149" width="0.0117%" height="15" fill="rgb(213,25,53)" fg:x="8157" fg:w="1"/><text x="95.6535%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (4 samples, 0.05%)</title><rect x="95.4152%" y="181" width="0.0468%" height="15" fill="rgb(252,105,26)" fg:x="8158" fg:w="4"/><text x="95.6652%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="95.4620%" y="181" width="0.0234%" height="15" fill="rgb(220,39,43)" fg:x="8162" fg:w="2"/><text x="95.7120%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (4 samples, 0.05%)</title><rect x="95.5439%" y="165" width="0.0468%" height="15" fill="rgb(229,68,48)" fg:x="8169" fg:w="4"/><text x="95.7939%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.07%)</title><rect x="95.5906%" y="165" width="0.0702%" height="15" fill="rgb(252,8,32)" fg:x="8173" fg:w="6"/><text x="95.8406%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (43 samples, 0.50%)</title><rect x="95.6608%" y="165" width="0.5029%" height="15" fill="rgb(223,20,43)" fg:x="8179" fg:w="43"/><text x="95.9108%" y="175.50"></text></g><g><title>engine`engine::main (8,520 samples, 99.65%)</title><rect x="0.0936%" y="197" width="99.6491%" height="15" fill="rgb(229,81,49)" fg:x="8" fg:w="8520"/><text x="0.3436%" y="207.50">engine`engine::main</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (364 samples, 4.26%)</title><rect x="95.4854%" y="181" width="4.2573%" height="15" fill="rgb(236,28,36)" fg:x="8164" fg:w="364"/><text x="95.7354%" y="191.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memset (306 samples, 3.58%)</title><rect x="96.1637%" y="165" width="3.5789%" height="15" fill="rgb(249,185,26)" fg:x="8222" fg:w="306"/><text x="96.4137%" y="175.50">libs..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (9 samples, 0.11%)</title><rect x="99.7427%" y="197" width="0.1053%" height="15" fill="rgb(249,174,33)" fg:x="8528" fg:w="9"/><text x="99.9927%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="99.8480%" y="197" width="0.0234%" height="15" fill="rgb(233,201,37)" fg:x="8537" fg:w="2"/><text x="100.0980%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.05%)</title><rect x="99.8713%" y="197" width="0.0468%" height="15" fill="rgb(221,78,26)" fg:x="8539" fg:w="4"/><text x="100.1213%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="99.9181%" y="197" width="0.0117%" height="15" fill="rgb(250,127,30)" fg:x="8543" fg:w="1"/><text x="100.1681%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.01%)</title><rect x="99.9298%" y="197" width="0.0117%" height="15" fill="rgb(230,49,44)" fg:x="8544" fg:w="1"/><text x="100.1798%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (2 samples, 0.02%)</title><rect x="99.9415%" y="197" width="0.0234%" height="15" fill="rgb(229,67,23)" fg:x="8545" fg:w="2"/><text x="100.1915%" y="207.50"></text></g><g><title>dyld`start (8,549 samples, 99.99%)</title><rect x="0.0000%" y="293" width="99.9883%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="8549"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>engine`main (8,549 samples, 99.99%)</title><rect x="0.0000%" y="277" width="99.9883%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="8549"/><text x="0.2500%" y="287.50">engine`main</text></g><g><title>engine`std::rt::lang_start (8,549 samples, 99.99%)</title><rect x="0.0000%" y="261" width="99.9883%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="8549"/><text x="0.2500%" y="271.50">engine`std::rt::lang_start</text></g><g><title>engine`std::rt::lang_start_internal (8,549 samples, 99.99%)</title><rect x="0.0000%" y="245" width="99.9883%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="8549"/><text x="0.2500%" y="255.50">engine`std::rt::lang_start_internal</text></g><g><title>engine`std::rt::lang_start::_{{closure}} (8,549 samples, 99.99%)</title><rect x="0.0000%" y="229" width="99.9883%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="8549"/><text x="0.2500%" y="239.50">engine`std::rt::lang_start::_{{closure}}</text></g><g><title>engine`std::sys_common::backtrace::__rust_begin_short_backtrace (8,549 samples, 99.99%)</title><rect x="0.0000%" y="213" width="99.9883%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="8549"/><text x="0.2500%" y="223.50">engine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="99.9649%" y="197" width="0.0234%" height="15" fill="rgb(250,79,13)" fg:x="8547" fg:w="2"/><text x="100.2149%" y="207.50"></text></g><g><title>all (8,550 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="8550"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.01%)</title><rect x="99.9883%" y="293" width="0.0117%" height="15" fill="rgb(228,22,38)" fg:x="8549" fg:w="1"/><text x="100.2383%" y="303.50"></text></g></svg></svg>