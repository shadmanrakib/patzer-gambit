<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="5870"><g><title>engine`DYLD-STUB$$calloc (1 samples, 0.02%)</title><rect x="0.0000%" y="165" width="0.0170%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>engine`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.0170%" y="165" width="0.0170%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2670%" y="175.50"></text></g><g><title>engine`__rdl_alloc_zeroed (1 samples, 0.02%)</title><rect x="0.0341%" y="165" width="0.0170%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.2841%" y="175.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (1 samples, 0.02%)</title><rect x="0.0511%" y="117" width="0.0170%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3011%" y="127.50"></text></g><g><title>engine`DYLD-STUB$$free (3 samples, 0.05%)</title><rect x="0.9540%" y="101" width="0.0511%" height="15" fill="rgb(208,68,35)" fg:x="56" fg:w="3"/><text x="1.2040%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$malloc (3 samples, 0.05%)</title><rect x="1.0051%" y="101" width="0.0511%" height="15" fill="rgb(232,128,0)" fg:x="59" fg:w="3"/><text x="1.2551%" y="111.50"></text></g><g><title>engine`__rdl_alloc (5 samples, 0.09%)</title><rect x="1.0562%" y="101" width="0.0852%" height="15" fill="rgb(207,160,47)" fg:x="62" fg:w="5"/><text x="1.3062%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (42 samples, 0.72%)</title><rect x="1.1414%" y="101" width="0.7155%" height="15" fill="rgb(228,23,34)" fg:x="67" fg:w="42"/><text x="1.3914%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (522 samples, 8.89%)</title><rect x="18.3816%" y="85" width="8.8927%" height="15" fill="rgb(218,30,26)" fg:x="1079" fg:w="522"/><text x="18.6316%" y="95.50">engine`engine..</text></g><g><title>engine`engine::moves::perft::_perft (29 samples, 0.49%)</title><rect x="27.2743%" y="85" width="0.4940%" height="15" fill="rgb(220,122,19)" fg:x="1601" fg:w="29"/><text x="27.5243%" y="95.50"></text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::get (1 samples, 0.02%)</title><rect x="29.2504%" y="69" width="0.0170%" height="15" fill="rgb(250,228,42)" fg:x="1717" fg:w="1"/><text x="29.5004%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (72 samples, 1.23%)</title><rect x="29.2675%" y="69" width="1.2266%" height="15" fill="rgb(240,193,28)" fg:x="1718" fg:w="72"/><text x="29.5175%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (31 samples, 0.53%)</title><rect x="30.4940%" y="69" width="0.5281%" height="15" fill="rgb(216,20,37)" fg:x="1790" fg:w="31"/><text x="30.7440%" y="79.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (20 samples, 0.34%)</title><rect x="30.6814%" y="53" width="0.3407%" height="15" fill="rgb(206,188,39)" fg:x="1801" fg:w="20"/><text x="30.9314%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (78 samples, 1.33%)</title><rect x="31.0221%" y="69" width="1.3288%" height="15" fill="rgb(217,207,13)" fg:x="1821" fg:w="78"/><text x="31.2721%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (132 samples, 2.25%)</title><rect x="32.3509%" y="69" width="2.2487%" height="15" fill="rgb(231,73,38)" fg:x="1899" fg:w="132"/><text x="32.6009%" y="79.50">e..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (1 samples, 0.02%)</title><rect x="34.5826%" y="53" width="0.0170%" height="15" fill="rgb(225,20,46)" fg:x="2030" fg:w="1"/><text x="34.8326%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (92 samples, 1.57%)</title><rect x="34.5997%" y="69" width="1.5673%" height="15" fill="rgb(210,31,41)" fg:x="2031" fg:w="92"/><text x="34.8497%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (123 samples, 2.10%)</title><rect x="36.1670%" y="69" width="2.0954%" height="15" fill="rgb(221,200,47)" fg:x="2123" fg:w="123"/><text x="36.4170%" y="79.50">e..</text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (55 samples, 0.94%)</title><rect x="38.2624%" y="69" width="0.9370%" height="15" fill="rgb(226,26,5)" fg:x="2246" fg:w="55"/><text x="38.5124%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (726 samples, 12.37%)</title><rect x="27.7683%" y="85" width="12.3680%" height="15" fill="rgb(249,33,26)" fg:x="1630" fg:w="726"/><text x="28.0183%" y="95.50">engine`engine::mov..</text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (55 samples, 0.94%)</title><rect x="39.1993%" y="69" width="0.9370%" height="15" fill="rgb(235,183,28)" fg:x="2301" fg:w="55"/><text x="39.4493%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (5 samples, 0.09%)</title><rect x="40.1363%" y="85" width="0.0852%" height="15" fill="rgb(221,5,38)" fg:x="2356" fg:w="5"/><text x="40.3863%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (2 samples, 0.03%)</title><rect x="40.2215%" y="85" width="0.0341%" height="15" fill="rgb(247,18,42)" fg:x="2361" fg:w="2"/><text x="40.4715%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (1 samples, 0.02%)</title><rect x="40.2555%" y="85" width="0.0170%" height="15" fill="rgb(241,131,45)" fg:x="2363" fg:w="1"/><text x="40.5055%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (8 samples, 0.14%)</title><rect x="40.2726%" y="85" width="0.1363%" height="15" fill="rgb(249,31,29)" fg:x="2364" fg:w="8"/><text x="40.5226%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (7 samples, 0.12%)</title><rect x="40.4089%" y="85" width="0.1193%" height="15" fill="rgb(225,111,53)" fg:x="2372" fg:w="7"/><text x="40.6589%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (1 samples, 0.02%)</title><rect x="40.5281%" y="85" width="0.0170%" height="15" fill="rgb(238,160,17)" fg:x="2379" fg:w="1"/><text x="40.7781%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (6 samples, 0.10%)</title><rect x="40.5451%" y="85" width="0.1022%" height="15" fill="rgb(214,148,48)" fg:x="2380" fg:w="6"/><text x="40.7951%" y="95.50"></text></g><g><title>engine`engine::state::boards::Boards::place_piece (135 samples, 2.30%)</title><rect x="40.6474%" y="85" width="2.2998%" height="15" fill="rgb(232,36,49)" fg:x="2386" fg:w="135"/><text x="40.8974%" y="95.50">e..</text></g><g><title>engine`engine::state::boards::Boards::remove_piece (73 samples, 1.24%)</title><rect x="42.9472%" y="85" width="1.2436%" height="15" fill="rgb(209,103,24)" fg:x="2521" fg:w="73"/><text x="43.1972%" y="95.50"></text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::get (404 samples, 6.88%)</title><rect x="52.4702%" y="69" width="6.8825%" height="15" fill="rgb(229,88,8)" fg:x="3080" fg:w="404"/><text x="52.7202%" y="79.50">engine`&lt;u..</text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::set (390 samples, 6.64%)</title><rect x="59.3526%" y="69" width="6.6440%" height="15" fill="rgb(213,181,19)" fg:x="3484" fg:w="390"/><text x="59.6026%" y="79.50">engine`&lt;u..</text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::unset (538 samples, 9.17%)</title><rect x="65.9966%" y="69" width="9.1652%" height="15" fill="rgb(254,191,54)" fg:x="3874" fg:w="538"/><text x="66.2466%" y="79.50">engine`&lt;u64 a..</text></g><g><title>engine`engine::state::boards::Boards::place_piece (215 samples, 3.66%)</title><rect x="75.1618%" y="69" width="3.6627%" height="15" fill="rgb(241,83,37)" fg:x="4412" fg:w="215"/><text x="75.4118%" y="79.50">engi..</text></g><g><title>engine`engine::state::game::GameState::make_move (2,357 samples, 40.15%)</title><rect x="44.1908%" y="85" width="40.1533%" height="15" fill="rgb(233,36,39)" fg:x="2594" fg:w="2357"/><text x="44.4408%" y="95.50">engine`engine::state::game::GameState::make_move</text></g><g><title>engine`engine::state::boards::Boards::remove_piece (324 samples, 5.52%)</title><rect x="78.8245%" y="69" width="5.5196%" height="15" fill="rgb(226,3,54)" fg:x="4627" fg:w="324"/><text x="79.0745%" y="79.50">engine`..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="84.3441%" y="85" width="0.0170%" height="15" fill="rgb(245,192,40)" fg:x="4951" fg:w="1"/><text x="84.5941%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.10%)</title><rect x="84.3612%" y="85" width="0.1022%" height="15" fill="rgb(238,167,29)" fg:x="4952" fg:w="6"/><text x="84.6112%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (23 samples, 0.39%)</title><rect x="84.4634%" y="85" width="0.3918%" height="15" fill="rgb(232,182,51)" fg:x="4958" fg:w="23"/><text x="84.7134%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.03%)</title><rect x="84.8552%" y="85" width="0.0341%" height="15" fill="rgb(231,60,39)" fg:x="4981" fg:w="2"/><text x="85.1052%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (11 samples, 0.19%)</title><rect x="84.9404%" y="69" width="0.1874%" height="15" fill="rgb(208,69,12)" fg:x="4986" fg:w="11"/><text x="85.1904%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="85.2129%" y="53" width="0.0170%" height="15" fill="rgb(235,93,37)" fg:x="5002" fg:w="1"/><text x="85.4629%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="85.2129%" y="37" width="0.0170%" height="15" fill="rgb(213,116,39)" fg:x="5002" fg:w="1"/><text x="85.4629%" y="47.50"></text></g><g><title>engine`engine::moves::perft::_perft (4,895 samples, 83.39%)</title><rect x="1.8569%" y="101" width="83.3901%" height="15" fill="rgb(222,207,29)" fg:x="109" fg:w="4895"/><text x="2.1069%" y="111.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.36%)</title><rect x="84.8893%" y="85" width="0.3578%" height="15" fill="rgb(206,96,30)" fg:x="4983" fg:w="21"/><text x="85.1393%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.12%)</title><rect x="85.1278%" y="69" width="0.1193%" height="15" fill="rgb(218,138,4)" fg:x="4997" fg:w="7"/><text x="85.3778%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="85.2300%" y="53" width="0.0170%" height="15" fill="rgb(250,191,14)" fg:x="5003" fg:w="1"/><text x="85.4800%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="85.2300%" y="37" width="0.0170%" height="15" fill="rgb(239,60,40)" fg:x="5003" fg:w="1"/><text x="85.4800%" y="47.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (5 samples, 0.09%)</title><rect x="85.4003%" y="85" width="0.0852%" height="15" fill="rgb(206,27,48)" fg:x="5013" fg:w="5"/><text x="85.6503%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (1 samples, 0.02%)</title><rect x="85.4855%" y="85" width="0.0170%" height="15" fill="rgb(225,35,8)" fg:x="5018" fg:w="1"/><text x="85.7355%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (7 samples, 0.12%)</title><rect x="85.5026%" y="85" width="0.1193%" height="15" fill="rgb(250,213,24)" fg:x="5019" fg:w="7"/><text x="85.7526%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (8 samples, 0.14%)</title><rect x="85.6218%" y="85" width="0.1363%" height="15" fill="rgb(247,123,22)" fg:x="5026" fg:w="8"/><text x="85.8718%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (2 samples, 0.03%)</title><rect x="85.7581%" y="85" width="0.0341%" height="15" fill="rgb(231,138,38)" fg:x="5034" fg:w="2"/><text x="86.0081%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (5 samples, 0.09%)</title><rect x="85.7922%" y="85" width="0.0852%" height="15" fill="rgb(231,145,46)" fg:x="5036" fg:w="5"/><text x="86.0422%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (1 samples, 0.02%)</title><rect x="85.8773%" y="85" width="0.0170%" height="15" fill="rgb(251,118,11)" fg:x="5041" fg:w="1"/><text x="86.1273%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (40 samples, 0.68%)</title><rect x="85.2470%" y="101" width="0.6814%" height="15" fill="rgb(217,147,25)" fg:x="5004" fg:w="40"/><text x="85.4970%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (2 samples, 0.03%)</title><rect x="85.8944%" y="85" width="0.0341%" height="15" fill="rgb(247,81,37)" fg:x="5042" fg:w="2"/><text x="86.1444%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (2 samples, 0.03%)</title><rect x="85.9284%" y="101" width="0.0341%" height="15" fill="rgb(209,12,38)" fg:x="5044" fg:w="2"/><text x="86.1784%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (1 samples, 0.02%)</title><rect x="85.9625%" y="101" width="0.0170%" height="15" fill="rgb(227,1,9)" fg:x="5046" fg:w="1"/><text x="86.2125%" y="111.50"></text></g><g><title>engine`engine::state::boards::Boards::place_piece (3 samples, 0.05%)</title><rect x="85.9796%" y="101" width="0.0511%" height="15" fill="rgb(248,47,43)" fg:x="5047" fg:w="3"/><text x="86.2296%" y="111.50"></text></g><g><title>engine`engine::state::boards::Boards::remove_piece (4 samples, 0.07%)</title><rect x="86.0307%" y="101" width="0.0681%" height="15" fill="rgb(221,10,30)" fg:x="5050" fg:w="4"/><text x="86.2807%" y="111.50"></text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::get (3 samples, 0.05%)</title><rect x="87.9727%" y="85" width="0.0511%" height="15" fill="rgb(210,229,1)" fg:x="5164" fg:w="3"/><text x="88.2227%" y="95.50"></text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::set (3 samples, 0.05%)</title><rect x="88.0239%" y="85" width="0.0511%" height="15" fill="rgb(222,148,37)" fg:x="5167" fg:w="3"/><text x="88.2739%" y="95.50"></text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::unset (28 samples, 0.48%)</title><rect x="88.0750%" y="85" width="0.4770%" height="15" fill="rgb(234,67,33)" fg:x="5170" fg:w="28"/><text x="88.3250%" y="95.50"></text></g><g><title>engine`engine::state::boards::Boards::place_piece (4 samples, 0.07%)</title><rect x="88.5520%" y="85" width="0.0681%" height="15" fill="rgb(247,98,35)" fg:x="5198" fg:w="4"/><text x="88.8020%" y="95.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (168 samples, 2.86%)</title><rect x="86.0988%" y="101" width="2.8620%" height="15" fill="rgb(247,138,52)" fg:x="5054" fg:w="168"/><text x="86.3488%" y="111.50">en..</text></g><g><title>engine`engine::state::boards::Boards::remove_piece (20 samples, 0.34%)</title><rect x="88.6201%" y="85" width="0.3407%" height="15" fill="rgb(213,79,30)" fg:x="5202" fg:w="20"/><text x="88.8701%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.14%)</title><rect x="88.9608%" y="101" width="0.1363%" height="15" fill="rgb(246,177,23)" fg:x="5222" fg:w="8"/><text x="89.2108%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.07%)</title><rect x="89.0971%" y="101" width="0.0681%" height="15" fill="rgb(230,62,27)" fg:x="5230" fg:w="4"/><text x="89.3471%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.05%)</title><rect x="89.1652%" y="101" width="0.0511%" height="15" fill="rgb(216,154,8)" fg:x="5234" fg:w="3"/><text x="89.4152%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.22%)</title><rect x="89.2164%" y="101" width="0.2215%" height="15" fill="rgb(244,35,45)" fg:x="5237" fg:w="13"/><text x="89.4664%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.10%)</title><rect x="89.4378%" y="101" width="0.1022%" height="15" fill="rgb(251,115,12)" fg:x="5250" fg:w="6"/><text x="89.6878%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.03%)</title><rect x="89.5060%" y="85" width="0.0341%" height="15" fill="rgb(240,54,50)" fg:x="5254" fg:w="2"/><text x="89.7560%" y="95.50"></text></g><g><title>engine`engine::moves::perft::_perft (5,255 samples, 89.52%)</title><rect x="0.0681%" y="117" width="89.5230%" height="15" fill="rgb(233,84,52)" fg:x="4" fg:w="5255"/><text x="0.3181%" y="127.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.05%)</title><rect x="89.5400%" y="101" width="0.0511%" height="15" fill="rgb(207,117,47)" fg:x="5256" fg:w="3"/><text x="89.7900%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (3 samples, 0.05%)</title><rect x="89.5911%" y="117" width="0.0511%" height="15" fill="rgb(249,43,39)" fg:x="5259" fg:w="3"/><text x="89.8411%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (1 samples, 0.02%)</title><rect x="89.6252%" y="101" width="0.0170%" height="15" fill="rgb(209,38,44)" fg:x="5261" fg:w="1"/><text x="89.8752%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (8 samples, 0.14%)</title><rect x="89.6422%" y="117" width="0.1363%" height="15" fill="rgb(236,212,23)" fg:x="5262" fg:w="8"/><text x="89.8922%" y="127.50"></text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::unset (2 samples, 0.03%)</title><rect x="89.7445%" y="101" width="0.0341%" height="15" fill="rgb(242,79,21)" fg:x="5268" fg:w="2"/><text x="89.9945%" y="111.50"></text></g><g><title>engine`engine::moves::perft::perft_unmake (5,268 samples, 89.74%)</title><rect x="0.0511%" y="165" width="89.7445%" height="15" fill="rgb(211,96,35)" fg:x="3" fg:w="5268"/><text x="0.3011%" y="175.50">engine`engine::moves::perft::perft_unmake</text></g><g><title>engine`engine::moves::perft::_perft (5,268 samples, 89.74%)</title><rect x="0.0511%" y="149" width="89.7445%" height="15" fill="rgb(253,215,40)" fg:x="3" fg:w="5268"/><text x="0.3011%" y="159.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (5,268 samples, 89.74%)</title><rect x="0.0511%" y="133" width="89.7445%" height="15" fill="rgb(211,81,21)" fg:x="3" fg:w="5268"/><text x="0.3011%" y="143.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="89.7785%" y="117" width="0.0170%" height="15" fill="rgb(208,190,38)" fg:x="5270" fg:w="1"/><text x="90.0285%" y="127.50"></text></g><g><title>engine`&lt;u64 as engine::state::boards::BitBoard&gt;::set (1 samples, 0.02%)</title><rect x="89.8637%" y="149" width="0.0170%" height="15" fill="rgb(235,213,38)" fg:x="5275" fg:w="1"/><text x="90.1137%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="89.8807%" y="149" width="0.0341%" height="15" fill="rgb(237,122,38)" fg:x="5276" fg:w="2"/><text x="90.1307%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.03%)</title><rect x="89.9148%" y="149" width="0.0341%" height="15" fill="rgb(244,218,35)" fg:x="5278" fg:w="2"/><text x="90.1648%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="89.9489%" y="133" width="0.0170%" height="15" fill="rgb(240,68,47)" fg:x="5280" fg:w="1"/><text x="90.1989%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="89.9489%" y="117" width="0.0170%" height="15" fill="rgb(210,16,53)" fg:x="5280" fg:w="1"/><text x="90.1989%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="89.9489%" y="101" width="0.0170%" height="15" fill="rgb(235,124,12)" fg:x="5280" fg:w="1"/><text x="90.1989%" y="111.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_bishop_magic_numbers (15 samples, 0.26%)</title><rect x="89.7956%" y="165" width="0.2555%" height="15" fill="rgb(224,169,11)" fg:x="5271" fg:w="15"/><text x="90.0456%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.10%)</title><rect x="89.9489%" y="149" width="0.1022%" height="15" fill="rgb(250,166,2)" fg:x="5280" fg:w="6"/><text x="90.1989%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.09%)</title><rect x="89.9659%" y="133" width="0.0852%" height="15" fill="rgb(242,216,29)" fg:x="5281" fg:w="5"/><text x="90.2159%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="91.9080%" y="149" width="0.0170%" height="15" fill="rgb(230,116,27)" fg:x="5395" fg:w="1"/><text x="92.1580%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.09%)</title><rect x="91.9250%" y="149" width="0.0852%" height="15" fill="rgb(228,99,48)" fg:x="5396" fg:w="5"/><text x="92.1750%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.22%)</title><rect x="92.0102%" y="149" width="0.2215%" height="15" fill="rgb(253,11,6)" fg:x="5401" fg:w="13"/><text x="92.2602%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.05%)</title><rect x="92.2317%" y="149" width="0.0511%" height="15" fill="rgb(247,143,39)" fg:x="5414" fg:w="3"/><text x="92.4817%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.10%)</title><rect x="92.2828%" y="149" width="0.1022%" height="15" fill="rgb(236,97,10)" fg:x="5417" fg:w="6"/><text x="92.5328%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (4 samples, 0.07%)</title><rect x="92.4361%" y="133" width="0.0681%" height="15" fill="rgb(233,208,19)" fg:x="5426" fg:w="4"/><text x="92.6861%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.10%)</title><rect x="92.5043%" y="133" width="0.1022%" height="15" fill="rgb(216,164,2)" fg:x="5430" fg:w="6"/><text x="92.7543%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (30 samples, 0.51%)</title><rect x="92.6065%" y="133" width="0.5111%" height="15" fill="rgb(220,129,5)" fg:x="5436" fg:w="30"/><text x="92.8565%" y="143.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_rook_magic_numbers (558 samples, 9.51%)</title><rect x="90.0511%" y="165" width="9.5060%" height="15" fill="rgb(242,17,10)" fg:x="5286" fg:w="558"/><text x="90.3011%" y="175.50">engine`engine:..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (421 samples, 7.17%)</title><rect x="92.3850%" y="149" width="7.1721%" height="15" fill="rgb(242,107,0)" fg:x="5423" fg:w="421"/><text x="92.6350%" y="159.50">libsystem_..</text></g><g><title>libsystem_platform.dylib`_platform_memset (378 samples, 6.44%)</title><rect x="93.1175%" y="133" width="6.4395%" height="15" fill="rgb(251,28,31)" fg:x="5466" fg:w="378"/><text x="93.3675%" y="143.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.12%)</title><rect x="99.5571%" y="165" width="0.1193%" height="15" fill="rgb(233,223,10)" fg:x="5844" fg:w="7"/><text x="99.8071%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="99.6763%" y="165" width="0.0170%" height="15" fill="rgb(215,21,27)" fg:x="5851" fg:w="1"/><text x="99.9263%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="99.6934%" y="165" width="0.0170%" height="15" fill="rgb(232,23,21)" fg:x="5852" fg:w="1"/><text x="99.9434%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.17%)</title><rect x="99.7104%" y="165" width="0.1704%" height="15" fill="rgb(244,5,23)" fg:x="5853" fg:w="10"/><text x="99.9604%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="99.8807%" y="165" width="0.0170%" height="15" fill="rgb(226,81,46)" fg:x="5863" fg:w="1"/><text x="100.1307%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.05%)</title><rect x="99.8978%" y="165" width="0.0511%" height="15" fill="rgb(247,70,30)" fg:x="5864" fg:w="3"/><text x="100.1478%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (1 samples, 0.02%)</title><rect x="99.9489%" y="165" width="0.0170%" height="15" fill="rgb(212,68,19)" fg:x="5867" fg:w="1"/><text x="100.1989%" y="175.50"></text></g><g><title>all (5,870 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="5870"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`start (5,870 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="5870"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>engine`main (5,870 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="5870"/><text x="0.2500%" y="271.50">engine`main</text></g><g><title>engine`std::rt::lang_start (5,870 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="5870"/><text x="0.2500%" y="255.50">engine`std::rt::lang_start</text></g><g><title>engine`std::rt::lang_start_internal (5,870 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="5870"/><text x="0.2500%" y="239.50">engine`std::rt::lang_start_internal</text></g><g><title>engine`std::rt::lang_start::_{{closure}} (5,870 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="5870"/><text x="0.2500%" y="223.50">engine`std::rt::lang_start::_{{closure}}</text></g><g><title>engine`std::sys_common::backtrace::__rust_begin_short_backtrace (5,870 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="5870"/><text x="0.2500%" y="207.50">engine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>engine`engine::main (5,870 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="5870"/><text x="0.2500%" y="191.50">engine`engine::main</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="99.9659%" y="165" width="0.0341%" height="15" fill="rgb(236,23,11)" fg:x="5868" fg:w="2"/><text x="100.2159%" y="175.50"></text></g></svg></svg>