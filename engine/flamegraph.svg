<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="8500"><g><title>engine`DYLD-STUB$$calloc (5 samples, 0.06%)</title><rect x="0.0000%" y="181" width="0.0588%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="191.50"></text></g><g><title>engine`DYLD-STUB$$free (4 samples, 0.05%)</title><rect x="0.0588%" y="181" width="0.0471%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="4"/><text x="0.3088%" y="191.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (1 samples, 0.01%)</title><rect x="0.1059%" y="117" width="0.0118%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="1"/><text x="0.3559%" y="127.50"></text></g><g><title>engine`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="0.4824%" y="101" width="0.0118%" height="15" fill="rgb(248,212,6)" fg:x="41" fg:w="1"/><text x="0.7324%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="0.4941%" y="101" width="0.0118%" height="15" fill="rgb(208,68,35)" fg:x="42" fg:w="1"/><text x="0.7441%" y="111.50"></text></g><g><title>engine`__rdl_alloc (3 samples, 0.04%)</title><rect x="0.5059%" y="101" width="0.0353%" height="15" fill="rgb(232,128,0)" fg:x="43" fg:w="3"/><text x="0.7559%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (75 samples, 0.88%)</title><rect x="0.5412%" y="101" width="0.8824%" height="15" fill="rgb(207,160,47)" fg:x="46" fg:w="75"/><text x="0.7912%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (32 samples, 0.38%)</title><rect x="1.0471%" y="85" width="0.3765%" height="15" fill="rgb(228,23,34)" fg:x="89" fg:w="32"/><text x="1.2971%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (783 samples, 9.21%)</title><rect x="12.0235%" y="85" width="9.2118%" height="15" fill="rgb(218,30,26)" fg:x="1022" fg:w="783"/><text x="12.2735%" y="95.50">engine`engine..</text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (622 samples, 7.32%)</title><rect x="13.9176%" y="69" width="7.3176%" height="15" fill="rgb(220,122,19)" fg:x="1183" fg:w="622"/><text x="14.1676%" y="79.50">engine`eng..</text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (77 samples, 0.91%)</title><rect x="21.3765%" y="69" width="0.9059%" height="15" fill="rgb(250,228,42)" fg:x="1817" fg:w="77"/><text x="21.6265%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (69 samples, 0.81%)</title><rect x="22.2824%" y="69" width="0.8118%" height="15" fill="rgb(240,193,28)" fg:x="1894" fg:w="69"/><text x="22.5324%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (70 samples, 0.82%)</title><rect x="23.0941%" y="69" width="0.8235%" height="15" fill="rgb(216,20,37)" fg:x="1963" fg:w="70"/><text x="23.3441%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (181 samples, 2.13%)</title><rect x="23.9176%" y="69" width="2.1294%" height="15" fill="rgb(206,188,39)" fg:x="2033" fg:w="181"/><text x="24.1676%" y="79.50">e..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (86 samples, 1.01%)</title><rect x="25.0353%" y="53" width="1.0118%" height="15" fill="rgb(217,207,13)" fg:x="2128" fg:w="86"/><text x="25.2853%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (32 samples, 0.38%)</title><rect x="26.0471%" y="69" width="0.3765%" height="15" fill="rgb(231,73,38)" fg:x="2214" fg:w="32"/><text x="26.2971%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (81 samples, 0.95%)</title><rect x="26.4235%" y="69" width="0.9529%" height="15" fill="rgb(225,20,46)" fg:x="2246" fg:w="81"/><text x="26.6735%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (98 samples, 1.15%)</title><rect x="27.3765%" y="69" width="1.1529%" height="15" fill="rgb(210,31,41)" fg:x="2327" fg:w="98"/><text x="27.6265%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (47 samples, 0.55%)</title><rect x="28.5294%" y="69" width="0.5529%" height="15" fill="rgb(221,200,47)" fg:x="2425" fg:w="47"/><text x="28.7794%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (713 samples, 8.39%)</title><rect x="21.2353%" y="85" width="8.3882%" height="15" fill="rgb(226,26,5)" fg:x="1805" fg:w="713"/><text x="21.4853%" y="95.50">engine`engin..</text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (46 samples, 0.54%)</title><rect x="29.0824%" y="69" width="0.5412%" height="15" fill="rgb(249,33,26)" fg:x="2472" fg:w="46"/><text x="29.3324%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (2 samples, 0.02%)</title><rect x="29.6235%" y="85" width="0.0235%" height="15" fill="rgb(235,183,28)" fg:x="2518" fg:w="2"/><text x="29.8735%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (36 samples, 0.42%)</title><rect x="29.6471%" y="85" width="0.4235%" height="15" fill="rgb(221,5,38)" fg:x="2520" fg:w="36"/><text x="29.8971%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (29 samples, 0.34%)</title><rect x="29.7294%" y="69" width="0.3412%" height="15" fill="rgb(247,18,42)" fg:x="2527" fg:w="29"/><text x="29.9794%" y="79.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (22 samples, 0.26%)</title><rect x="29.8118%" y="53" width="0.2588%" height="15" fill="rgb(241,131,45)" fg:x="2534" fg:w="22"/><text x="30.0618%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (5 samples, 0.06%)</title><rect x="30.0706%" y="85" width="0.0588%" height="15" fill="rgb(249,31,29)" fg:x="2556" fg:w="5"/><text x="30.3206%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (5 samples, 0.06%)</title><rect x="30.1294%" y="85" width="0.0588%" height="15" fill="rgb(225,111,53)" fg:x="2561" fg:w="5"/><text x="30.3794%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (5 samples, 0.06%)</title><rect x="30.1882%" y="85" width="0.0588%" height="15" fill="rgb(238,160,17)" fg:x="2566" fg:w="5"/><text x="30.4382%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (7 samples, 0.08%)</title><rect x="30.2471%" y="85" width="0.0824%" height="15" fill="rgb(214,148,48)" fg:x="2571" fg:w="7"/><text x="30.4971%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (3 samples, 0.04%)</title><rect x="30.3294%" y="85" width="0.0353%" height="15" fill="rgb(232,36,49)" fg:x="2578" fg:w="3"/><text x="30.5794%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (4 samples, 0.05%)</title><rect x="30.3647%" y="85" width="0.0471%" height="15" fill="rgb(209,103,24)" fg:x="2581" fg:w="4"/><text x="30.6147%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (5 samples, 0.06%)</title><rect x="30.4118%" y="85" width="0.0588%" height="15" fill="rgb(229,88,8)" fg:x="2585" fg:w="5"/><text x="30.6618%" y="95.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (265 samples, 3.12%)</title><rect x="30.4706%" y="85" width="3.1176%" height="15" fill="rgb(213,181,19)" fg:x="2590" fg:w="265"/><text x="30.7206%" y="95.50">eng..</text></g><g><title>engine`engine::state::game::GameState::make_move (765 samples, 9.00%)</title><rect x="33.5882%" y="85" width="9.0000%" height="15" fill="rgb(254,191,54)" fg:x="2855" fg:w="765"/><text x="33.8382%" y="95.50">engine`engine..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.04%)</title><rect x="42.5882%" y="85" width="0.0353%" height="15" fill="rgb(241,83,37)" fg:x="3620" fg:w="3"/><text x="42.8382%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (10 samples, 0.12%)</title><rect x="42.6235%" y="85" width="0.1176%" height="15" fill="rgb(233,36,39)" fg:x="3623" fg:w="10"/><text x="42.8735%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.12%)</title><rect x="42.7412%" y="85" width="0.1176%" height="15" fill="rgb(226,3,54)" fg:x="3633" fg:w="10"/><text x="42.9912%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="42.8588%" y="85" width="0.0118%" height="15" fill="rgb(245,192,40)" fg:x="3643" fg:w="1"/><text x="43.1088%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (11 samples, 0.13%)</title><rect x="42.9412%" y="69" width="0.1294%" height="15" fill="rgb(238,167,29)" fg:x="3650" fg:w="11"/><text x="43.1912%" y="79.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,549 samples, 41.75%)</title><rect x="1.4235%" y="101" width="41.7529%" height="15" fill="rgb(232,182,51)" fg:x="121" fg:w="3549"/><text x="1.6735%" y="111.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.31%)</title><rect x="42.8706%" y="85" width="0.3059%" height="15" fill="rgb(231,60,39)" fg:x="3644" fg:w="26"/><text x="43.1206%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (9 samples, 0.11%)</title><rect x="43.0706%" y="69" width="0.1059%" height="15" fill="rgb(208,69,12)" fg:x="3661" fg:w="9"/><text x="43.3206%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="43.1647%" y="53" width="0.0118%" height="15" fill="rgb(235,93,37)" fg:x="3669" fg:w="1"/><text x="43.4147%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.01%)</title><rect x="43.1647%" y="37" width="0.0118%" height="15" fill="rgb(213,116,39)" fg:x="3669" fg:w="1"/><text x="43.4147%" y="47.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (7 samples, 0.08%)</title><rect x="43.1882%" y="85" width="0.0824%" height="15" fill="rgb(222,207,29)" fg:x="3671" fg:w="7"/><text x="43.4382%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (3 samples, 0.04%)</title><rect x="43.2706%" y="85" width="0.0353%" height="15" fill="rgb(206,96,30)" fg:x="3678" fg:w="3"/><text x="43.5206%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (4 samples, 0.05%)</title><rect x="43.3059%" y="85" width="0.0471%" height="15" fill="rgb(218,138,4)" fg:x="3681" fg:w="4"/><text x="43.5559%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (7 samples, 0.08%)</title><rect x="43.3529%" y="85" width="0.0824%" height="15" fill="rgb(250,191,14)" fg:x="3685" fg:w="7"/><text x="43.6029%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (5 samples, 0.06%)</title><rect x="43.3765%" y="69" width="0.0588%" height="15" fill="rgb(239,60,40)" fg:x="3687" fg:w="5"/><text x="43.6265%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (3 samples, 0.04%)</title><rect x="43.4353%" y="85" width="0.0353%" height="15" fill="rgb(206,27,48)" fg:x="3692" fg:w="3"/><text x="43.6853%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (5 samples, 0.06%)</title><rect x="43.4706%" y="85" width="0.0588%" height="15" fill="rgb(225,35,8)" fg:x="3695" fg:w="5"/><text x="43.7206%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (2 samples, 0.02%)</title><rect x="43.5294%" y="85" width="0.0235%" height="15" fill="rgb(250,213,24)" fg:x="3700" fg:w="2"/><text x="43.7794%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (1 samples, 0.01%)</title><rect x="43.5529%" y="85" width="0.0118%" height="15" fill="rgb(247,123,22)" fg:x="3702" fg:w="1"/><text x="43.8029%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (35 samples, 0.41%)</title><rect x="43.1765%" y="101" width="0.4118%" height="15" fill="rgb(231,138,38)" fg:x="3670" fg:w="35"/><text x="43.4265%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (2 samples, 0.02%)</title><rect x="43.5647%" y="85" width="0.0235%" height="15" fill="rgb(231,145,46)" fg:x="3703" fg:w="2"/><text x="43.8147%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (6 samples, 0.07%)</title><rect x="43.5882%" y="101" width="0.0706%" height="15" fill="rgb(251,118,11)" fg:x="3705" fg:w="6"/><text x="43.8382%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (1 samples, 0.01%)</title><rect x="43.6471%" y="85" width="0.0118%" height="15" fill="rgb(217,147,25)" fg:x="3710" fg:w="1"/><text x="43.8971%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (1 samples, 0.01%)</title><rect x="43.6471%" y="69" width="0.0118%" height="15" fill="rgb(247,81,37)" fg:x="3710" fg:w="1"/><text x="43.8971%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (1 samples, 0.01%)</title><rect x="43.6588%" y="101" width="0.0118%" height="15" fill="rgb(209,12,38)" fg:x="3711" fg:w="1"/><text x="43.9088%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (1 samples, 0.01%)</title><rect x="43.6706%" y="101" width="0.0118%" height="15" fill="rgb(227,1,9)" fg:x="3712" fg:w="1"/><text x="43.9206%" y="111.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (16 samples, 0.19%)</title><rect x="43.6824%" y="101" width="0.1882%" height="15" fill="rgb(248,47,43)" fg:x="3713" fg:w="16"/><text x="43.9324%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (226 samples, 2.66%)</title><rect x="43.8706%" y="101" width="2.6588%" height="15" fill="rgb(221,10,30)" fg:x="3729" fg:w="226"/><text x="44.1206%" y="111.50">en..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.12%)</title><rect x="46.5294%" y="101" width="0.1176%" height="15" fill="rgb(210,229,1)" fg:x="3955" fg:w="10"/><text x="46.7794%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.07%)</title><rect x="46.6471%" y="101" width="0.0706%" height="15" fill="rgb(222,148,37)" fg:x="3965" fg:w="6"/><text x="46.8971%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="46.7176%" y="101" width="0.0235%" height="15" fill="rgb(234,67,33)" fg:x="3971" fg:w="2"/><text x="46.9676%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.06%)</title><rect x="46.7412%" y="101" width="0.0588%" height="15" fill="rgb(247,98,35)" fg:x="3973" fg:w="5"/><text x="46.9912%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="46.8000%" y="85" width="0.0118%" height="15" fill="rgb(247,138,52)" fg:x="3978" fg:w="1"/><text x="47.0500%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (1 samples, 0.01%)</title><rect x="46.8118%" y="85" width="0.0118%" height="15" fill="rgb(213,79,30)" fg:x="3979" fg:w="1"/><text x="47.0618%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="46.8235%" y="85" width="0.0118%" height="15" fill="rgb(246,177,23)" fg:x="3980" fg:w="1"/><text x="47.0735%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.05%)</title><rect x="46.8000%" y="101" width="0.0471%" height="15" fill="rgb(230,62,27)" fg:x="3978" fg:w="4"/><text x="47.0500%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.01%)</title><rect x="46.8353%" y="85" width="0.0118%" height="15" fill="rgb(216,154,8)" fg:x="3981" fg:w="1"/><text x="47.0853%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="46.8471%" y="101" width="0.0118%" height="15" fill="rgb(244,35,45)" fg:x="3982" fg:w="1"/><text x="47.0971%" y="111.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,975 samples, 46.76%)</title><rect x="0.1176%" y="117" width="46.7647%" height="15" fill="rgb(251,115,12)" fg:x="10" fg:w="3975"/><text x="0.3676%" y="127.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="46.8588%" y="101" width="0.0235%" height="15" fill="rgb(240,54,50)" fg:x="3983" fg:w="2"/><text x="47.1088%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (1 samples, 0.01%)</title><rect x="46.8824%" y="117" width="0.0118%" height="15" fill="rgb(233,84,52)" fg:x="3985" fg:w="1"/><text x="47.1324%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (1 samples, 0.01%)</title><rect x="46.8824%" y="101" width="0.0118%" height="15" fill="rgb(207,117,47)" fg:x="3985" fg:w="1"/><text x="47.1324%" y="111.50"></text></g><g><title>engine`engine::moves::perft::perft (3,988 samples, 46.92%)</title><rect x="0.1059%" y="181" width="46.9176%" height="15" fill="rgb(249,43,39)" fg:x="9" fg:w="3988"/><text x="0.3559%" y="191.50">engine`engine::moves::perft::perft</text></g><g><title>engine`engine::moves::perft::_perft (3,988 samples, 46.92%)</title><rect x="0.1059%" y="165" width="46.9176%" height="15" fill="rgb(209,38,44)" fg:x="9" fg:w="3988"/><text x="0.3559%" y="175.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (3,988 samples, 46.92%)</title><rect x="0.1059%" y="149" width="46.9176%" height="15" fill="rgb(236,212,23)" fg:x="9" fg:w="3988"/><text x="0.3559%" y="159.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (3,988 samples, 46.92%)</title><rect x="0.1059%" y="133" width="46.9176%" height="15" fill="rgb(242,79,21)" fg:x="9" fg:w="3988"/><text x="0.3559%" y="143.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::state::game::GameState::make_move (11 samples, 0.13%)</title><rect x="46.8941%" y="117" width="0.1294%" height="15" fill="rgb(211,96,35)" fg:x="3986" fg:w="11"/><text x="47.1441%" y="127.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (1 samples, 0.01%)</title><rect x="47.0235%" y="149" width="0.0118%" height="15" fill="rgb(253,215,40)" fg:x="3997" fg:w="1"/><text x="47.2735%" y="159.50"></text></g><g><title>engine`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="47.0471%" y="133" width="0.0118%" height="15" fill="rgb(211,81,21)" fg:x="3999" fg:w="1"/><text x="47.2971%" y="143.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (2 samples, 0.02%)</title><rect x="47.0588%" y="133" width="0.0235%" height="15" fill="rgb(208,190,38)" fg:x="4000" fg:w="2"/><text x="47.3088%" y="143.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (1 samples, 0.01%)</title><rect x="47.0706%" y="117" width="0.0118%" height="15" fill="rgb(235,213,38)" fg:x="4001" fg:w="1"/><text x="47.3206%" y="127.50"></text></g><g><title>engine`DYLD-STUB$$free (3 samples, 0.04%)</title><rect x="47.4235%" y="117" width="0.0353%" height="15" fill="rgb(237,122,38)" fg:x="4031" fg:w="3"/><text x="47.6735%" y="127.50"></text></g><g><title>engine`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="47.4588%" y="117" width="0.0118%" height="15" fill="rgb(244,218,35)" fg:x="4034" fg:w="1"/><text x="47.7088%" y="127.50"></text></g><g><title>engine`__rdl_alloc (1 samples, 0.01%)</title><rect x="47.4706%" y="117" width="0.0118%" height="15" fill="rgb(240,68,47)" fg:x="4035" fg:w="1"/><text x="47.7206%" y="127.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (58 samples, 0.68%)</title><rect x="47.4824%" y="117" width="0.6824%" height="15" fill="rgb(210,16,53)" fg:x="4036" fg:w="58"/><text x="47.7324%" y="127.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (27 samples, 0.32%)</title><rect x="47.8471%" y="101" width="0.3176%" height="15" fill="rgb(235,124,12)" fg:x="4067" fg:w="27"/><text x="48.0971%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (795 samples, 9.35%)</title><rect x="59.2118%" y="101" width="9.3529%" height="15" fill="rgb(224,169,11)" fg:x="5033" fg:w="795"/><text x="59.4618%" y="111.50">engine`engine..</text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (637 samples, 7.49%)</title><rect x="61.0706%" y="85" width="7.4941%" height="15" fill="rgb(250,166,2)" fg:x="5191" fg:w="637"/><text x="61.3206%" y="95.50">engine`eng..</text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (67 samples, 0.79%)</title><rect x="68.6941%" y="85" width="0.7882%" height="15" fill="rgb(242,216,29)" fg:x="5839" fg:w="67"/><text x="68.9441%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (65 samples, 0.76%)</title><rect x="69.4824%" y="85" width="0.7647%" height="15" fill="rgb(230,116,27)" fg:x="5906" fg:w="65"/><text x="69.7324%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (83 samples, 0.98%)</title><rect x="70.2471%" y="85" width="0.9765%" height="15" fill="rgb(228,99,48)" fg:x="5971" fg:w="83"/><text x="70.4971%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (195 samples, 2.29%)</title><rect x="71.2235%" y="85" width="2.2941%" height="15" fill="rgb(253,11,6)" fg:x="6054" fg:w="195"/><text x="71.4735%" y="95.50">e..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (93 samples, 1.09%)</title><rect x="72.4235%" y="69" width="1.0941%" height="15" fill="rgb(247,143,39)" fg:x="6156" fg:w="93"/><text x="72.6735%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (21 samples, 0.25%)</title><rect x="73.5176%" y="85" width="0.2471%" height="15" fill="rgb(236,97,10)" fg:x="6249" fg:w="21"/><text x="73.7676%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (69 samples, 0.81%)</title><rect x="73.7647%" y="85" width="0.8118%" height="15" fill="rgb(233,208,19)" fg:x="6270" fg:w="69"/><text x="74.0147%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (102 samples, 1.20%)</title><rect x="74.5765%" y="85" width="1.2000%" height="15" fill="rgb(216,164,2)" fg:x="6339" fg:w="102"/><text x="74.8265%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (45 samples, 0.53%)</title><rect x="75.7765%" y="85" width="0.5294%" height="15" fill="rgb(220,129,5)" fg:x="6441" fg:w="45"/><text x="76.0265%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (703 samples, 8.27%)</title><rect x="68.5647%" y="101" width="8.2706%" height="15" fill="rgb(242,17,10)" fg:x="5828" fg:w="703"/><text x="68.8147%" y="111.50">engine`engin..</text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (45 samples, 0.53%)</title><rect x="76.3059%" y="85" width="0.5294%" height="15" fill="rgb(242,107,0)" fg:x="6486" fg:w="45"/><text x="76.5559%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (39 samples, 0.46%)</title><rect x="76.8353%" y="101" width="0.4588%" height="15" fill="rgb(251,28,31)" fg:x="6531" fg:w="39"/><text x="77.0853%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (31 samples, 0.36%)</title><rect x="76.9294%" y="85" width="0.3647%" height="15" fill="rgb(233,223,10)" fg:x="6539" fg:w="31"/><text x="77.1794%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (27 samples, 0.32%)</title><rect x="76.9765%" y="69" width="0.3176%" height="15" fill="rgb(215,21,27)" fg:x="6543" fg:w="27"/><text x="77.2265%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (6 samples, 0.07%)</title><rect x="77.2941%" y="101" width="0.0706%" height="15" fill="rgb(232,23,21)" fg:x="6570" fg:w="6"/><text x="77.5441%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (2 samples, 0.02%)</title><rect x="77.3647%" y="101" width="0.0235%" height="15" fill="rgb(244,5,23)" fg:x="6576" fg:w="2"/><text x="77.6147%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (4 samples, 0.05%)</title><rect x="77.3882%" y="101" width="0.0471%" height="15" fill="rgb(226,81,46)" fg:x="6578" fg:w="4"/><text x="77.6382%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (3 samples, 0.04%)</title><rect x="77.4353%" y="101" width="0.0353%" height="15" fill="rgb(247,70,30)" fg:x="6582" fg:w="3"/><text x="77.6853%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (9 samples, 0.11%)</title><rect x="77.4706%" y="101" width="0.1059%" height="15" fill="rgb(212,68,19)" fg:x="6585" fg:w="9"/><text x="77.7206%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (1 samples, 0.01%)</title><rect x="77.5765%" y="101" width="0.0118%" height="15" fill="rgb(240,187,13)" fg:x="6594" fg:w="1"/><text x="77.8265%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (4 samples, 0.05%)</title><rect x="77.5882%" y="101" width="0.0471%" height="15" fill="rgb(223,113,26)" fg:x="6595" fg:w="4"/><text x="77.8382%" y="111.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (260 samples, 3.06%)</title><rect x="77.6353%" y="101" width="3.0588%" height="15" fill="rgb(206,192,2)" fg:x="6599" fg:w="260"/><text x="77.8853%" y="111.50">eng..</text></g><g><title>engine`engine::state::game::GameState::make_move (734 samples, 8.64%)</title><rect x="80.6941%" y="101" width="8.6353%" height="15" fill="rgb(241,108,4)" fg:x="6859" fg:w="734"/><text x="80.9441%" y="111.50">engine`engin..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="89.3294%" y="101" width="0.0235%" height="15" fill="rgb(247,173,49)" fg:x="7593" fg:w="2"/><text x="89.5794%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.04%)</title><rect x="89.3529%" y="101" width="0.0353%" height="15" fill="rgb(224,114,35)" fg:x="7595" fg:w="3"/><text x="89.6029%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (13 samples, 0.15%)</title><rect x="89.3882%" y="101" width="0.1529%" height="15" fill="rgb(245,159,27)" fg:x="7598" fg:w="13"/><text x="89.6382%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="89.5412%" y="101" width="0.0118%" height="15" fill="rgb(245,172,44)" fg:x="7611" fg:w="1"/><text x="89.7912%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (9 samples, 0.11%)</title><rect x="89.6471%" y="85" width="0.1059%" height="15" fill="rgb(236,23,11)" fg:x="7620" fg:w="9"/><text x="89.8971%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="89.7529%" y="53" width="0.0118%" height="15" fill="rgb(205,117,38)" fg:x="7629" fg:w="1"/><text x="90.0029%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="89.7647%" y="53" width="0.0118%" height="15" fill="rgb(237,72,25)" fg:x="7630" fg:w="1"/><text x="90.0147%" y="63.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,538 samples, 41.62%)</title><rect x="48.1647%" y="117" width="41.6235%" height="15" fill="rgb(244,70,9)" fg:x="4094" fg:w="3538"/><text x="48.4147%" y="127.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.24%)</title><rect x="89.5529%" y="101" width="0.2353%" height="15" fill="rgb(217,125,39)" fg:x="7612" fg:w="20"/><text x="89.8029%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.04%)</title><rect x="89.7529%" y="85" width="0.0353%" height="15" fill="rgb(235,36,10)" fg:x="7629" fg:w="3"/><text x="90.0029%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.04%)</title><rect x="89.7529%" y="69" width="0.0353%" height="15" fill="rgb(251,123,47)" fg:x="7629" fg:w="3"/><text x="90.0029%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.01%)</title><rect x="89.7765%" y="53" width="0.0118%" height="15" fill="rgb(221,13,13)" fg:x="7631" fg:w="1"/><text x="90.0265%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (4 samples, 0.05%)</title><rect x="89.8235%" y="101" width="0.0471%" height="15" fill="rgb(238,131,9)" fg:x="7635" fg:w="4"/><text x="90.0735%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (1 samples, 0.01%)</title><rect x="89.8706%" y="101" width="0.0118%" height="15" fill="rgb(211,50,8)" fg:x="7639" fg:w="1"/><text x="90.1206%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (2 samples, 0.02%)</title><rect x="89.8824%" y="101" width="0.0235%" height="15" fill="rgb(245,182,24)" fg:x="7640" fg:w="2"/><text x="90.1324%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (6 samples, 0.07%)</title><rect x="89.9059%" y="101" width="0.0706%" height="15" fill="rgb(242,14,37)" fg:x="7642" fg:w="6"/><text x="90.1559%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (2 samples, 0.02%)</title><rect x="89.9529%" y="85" width="0.0235%" height="15" fill="rgb(246,228,12)" fg:x="7646" fg:w="2"/><text x="90.2029%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (2 samples, 0.02%)</title><rect x="89.9765%" y="101" width="0.0235%" height="15" fill="rgb(213,55,15)" fg:x="7648" fg:w="2"/><text x="90.2265%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (2 samples, 0.02%)</title><rect x="90.0000%" y="101" width="0.0235%" height="15" fill="rgb(209,9,3)" fg:x="7650" fg:w="2"/><text x="90.2500%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (4 samples, 0.05%)</title><rect x="90.0235%" y="101" width="0.0471%" height="15" fill="rgb(230,59,30)" fg:x="7652" fg:w="4"/><text x="90.2735%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::queen::generate_queen_moves (3 samples, 0.04%)</title><rect x="90.0706%" y="101" width="0.0353%" height="15" fill="rgb(209,121,21)" fg:x="7656" fg:w="3"/><text x="90.3206%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (28 samples, 0.33%)</title><rect x="89.7882%" y="117" width="0.3294%" height="15" fill="rgb(220,109,13)" fg:x="7632" fg:w="28"/><text x="90.0382%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (1 samples, 0.01%)</title><rect x="90.1059%" y="101" width="0.0118%" height="15" fill="rgb(232,18,1)" fg:x="7659" fg:w="1"/><text x="90.3559%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (6 samples, 0.07%)</title><rect x="90.1176%" y="117" width="0.0706%" height="15" fill="rgb(215,41,42)" fg:x="7660" fg:w="6"/><text x="90.3676%" y="127.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (3 samples, 0.04%)</title><rect x="90.1529%" y="101" width="0.0353%" height="15" fill="rgb(224,123,36)" fg:x="7663" fg:w="3"/><text x="90.4029%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (3 samples, 0.04%)</title><rect x="90.1529%" y="85" width="0.0353%" height="15" fill="rgb(240,125,3)" fg:x="7663" fg:w="3"/><text x="90.4029%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::knight::generate_knight_moves (1 samples, 0.01%)</title><rect x="90.1882%" y="117" width="0.0118%" height="15" fill="rgb(205,98,50)" fg:x="7666" fg:w="1"/><text x="90.4382%" y="127.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (14 samples, 0.16%)</title><rect x="90.2000%" y="117" width="0.1647%" height="15" fill="rgb(205,185,37)" fg:x="7667" fg:w="14"/><text x="90.4500%" y="127.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (238 samples, 2.80%)</title><rect x="90.3647%" y="117" width="2.8000%" height="15" fill="rgb(238,207,15)" fg:x="7681" fg:w="238"/><text x="90.6147%" y="127.50">en..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.08%)</title><rect x="93.1647%" y="117" width="0.0824%" height="15" fill="rgb(213,199,42)" fg:x="7919" fg:w="7"/><text x="93.4147%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.11%)</title><rect x="93.2471%" y="117" width="0.1059%" height="15" fill="rgb(235,201,11)" fg:x="7926" fg:w="9"/><text x="93.4971%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.08%)</title><rect x="93.3529%" y="117" width="0.0824%" height="15" fill="rgb(207,46,11)" fg:x="7935" fg:w="7"/><text x="93.6029%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.07%)</title><rect x="93.4353%" y="117" width="0.0706%" height="15" fill="rgb(241,35,35)" fg:x="7942" fg:w="6"/><text x="93.6853%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.04%)</title><rect x="93.5059%" y="117" width="0.0353%" height="15" fill="rgb(243,32,47)" fg:x="7948" fg:w="3"/><text x="93.7559%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_find_by_ptr (2 samples, 0.02%)</title><rect x="93.5176%" y="101" width="0.0235%" height="15" fill="rgb(247,202,23)" fg:x="7949" fg:w="2"/><text x="93.7676%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="93.5412%" y="117" width="0.0235%" height="15" fill="rgb(219,102,11)" fg:x="7951" fg:w="2"/><text x="93.7912%" y="127.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,955 samples, 46.53%)</title><rect x="47.0824%" y="133" width="46.5294%" height="15" fill="rgb(243,110,44)" fg:x="4002" fg:w="3955"/><text x="47.3324%" y="143.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.05%)</title><rect x="93.5647%" y="117" width="0.0471%" height="15" fill="rgb(222,74,54)" fg:x="7953" fg:w="4"/><text x="93.8147%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="93.5882%" y="101" width="0.0235%" height="15" fill="rgb(216,99,12)" fg:x="7955" fg:w="2"/><text x="93.8382%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="93.6000%" y="85" width="0.0118%" height="15" fill="rgb(226,22,26)" fg:x="7956" fg:w="1"/><text x="93.8500%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (1 samples, 0.01%)</title><rect x="93.6118%" y="117" width="0.0118%" height="15" fill="rgb(217,163,10)" fg:x="7957" fg:w="1"/><text x="93.8618%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (2 samples, 0.02%)</title><rect x="93.6235%" y="117" width="0.0235%" height="15" fill="rgb(213,25,53)" fg:x="7958" fg:w="2"/><text x="93.8735%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (4 samples, 0.05%)</title><rect x="93.6118%" y="133" width="0.0471%" height="15" fill="rgb(252,105,26)" fg:x="7957" fg:w="4"/><text x="93.8618%" y="143.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (1 samples, 0.01%)</title><rect x="93.6471%" y="117" width="0.0118%" height="15" fill="rgb(220,39,43)" fg:x="7960" fg:w="1"/><text x="93.8971%" y="127.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (1 samples, 0.01%)</title><rect x="93.6588%" y="133" width="0.0118%" height="15" fill="rgb(229,68,48)" fg:x="7961" fg:w="1"/><text x="93.9088%" y="143.50"></text></g><g><title>engine`engine::moves::perft::perft_unmake (3,976 samples, 46.78%)</title><rect x="47.0235%" y="181" width="46.7765%" height="15" fill="rgb(252,8,32)" fg:x="3997" fg:w="3976"/><text x="47.2735%" y="191.50">engine`engine::moves::perft::perft_unmake</text></g><g><title>engine`engine::moves::perft::_perft (3,976 samples, 46.78%)</title><rect x="47.0235%" y="165" width="46.7765%" height="15" fill="rgb(223,20,43)" fg:x="3997" fg:w="3976"/><text x="47.2735%" y="175.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (3,975 samples, 46.76%)</title><rect x="47.0353%" y="149" width="46.7647%" height="15" fill="rgb(229,81,49)" fg:x="3998" fg:w="3975"/><text x="47.2853%" y="159.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::state::game::GameState::make_move (11 samples, 0.13%)</title><rect x="93.6706%" y="133" width="0.1294%" height="15" fill="rgb(236,28,36)" fg:x="7962" fg:w="11"/><text x="93.9206%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="93.8353%" y="165" width="0.0118%" height="15" fill="rgb(249,185,26)" fg:x="7976" fg:w="1"/><text x="94.0853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="93.8471%" y="149" width="0.0118%" height="15" fill="rgb(249,174,33)" fg:x="7977" fg:w="1"/><text x="94.0971%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="93.8471%" y="133" width="0.0118%" height="15" fill="rgb(233,201,37)" fg:x="7977" fg:w="1"/><text x="94.0971%" y="143.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_bishop_magic_numbers (9 samples, 0.11%)</title><rect x="93.8000%" y="181" width="0.1059%" height="15" fill="rgb(221,78,26)" fg:x="7973" fg:w="9"/><text x="94.0500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.06%)</title><rect x="93.8471%" y="165" width="0.0588%" height="15" fill="rgb(250,127,30)" fg:x="7977" fg:w="5"/><text x="94.0971%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.05%)</title><rect x="93.8588%" y="149" width="0.0471%" height="15" fill="rgb(230,49,44)" fg:x="7978" fg:w="4"/><text x="94.1088%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="95.1294%" y="165" width="0.0235%" height="15" fill="rgb(229,67,23)" fg:x="8086" fg:w="2"/><text x="95.3794%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.04%)</title><rect x="95.1529%" y="165" width="0.0353%" height="15" fill="rgb(249,83,47)" fg:x="8088" fg:w="3"/><text x="95.4029%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.08%)</title><rect x="95.1882%" y="165" width="0.0824%" height="15" fill="rgb(215,43,3)" fg:x="8091" fg:w="7"/><text x="95.4382%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.02%)</title><rect x="95.2706%" y="165" width="0.0235%" height="15" fill="rgb(238,154,13)" fg:x="8098" fg:w="2"/><text x="95.5206%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.04%)</title><rect x="95.2941%" y="165" width="0.0353%" height="15" fill="rgb(219,56,2)" fg:x="8100" fg:w="3"/><text x="95.5441%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (9 samples, 0.11%)</title><rect x="95.3882%" y="149" width="0.1059%" height="15" fill="rgb(233,0,4)" fg:x="8108" fg:w="9"/><text x="95.6382%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.04%)</title><rect x="95.4941%" y="149" width="0.0353%" height="15" fill="rgb(235,30,7)" fg:x="8117" fg:w="3"/><text x="95.7441%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (49 samples, 0.58%)</title><rect x="95.5294%" y="149" width="0.5765%" height="15" fill="rgb(250,79,13)" fg:x="8120" fg:w="49"/><text x="95.7794%" y="159.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_rook_magic_numbers (497 samples, 5.85%)</title><rect x="93.9059%" y="181" width="5.8471%" height="15" fill="rgb(211,146,34)" fg:x="7982" fg:w="497"/><text x="94.1559%" y="191.50">engine`..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (376 samples, 4.42%)</title><rect x="95.3294%" y="165" width="4.4235%" height="15" fill="rgb(228,22,38)" fg:x="8103" fg:w="376"/><text x="95.5794%" y="175.50">libsy..</text></g><g><title>libsystem_platform.dylib`_platform_memset (310 samples, 3.65%)</title><rect x="96.1059%" y="149" width="3.6471%" height="15" fill="rgb(235,168,5)" fg:x="8169" fg:w="310"/><text x="96.3559%" y="159.50">libs..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.08%)</title><rect x="99.7529%" y="181" width="0.0824%" height="15" fill="rgb(221,155,16)" fg:x="8479" fg:w="7"/><text x="100.0029%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="99.8353%" y="181" width="0.0118%" height="15" fill="rgb(215,215,53)" fg:x="8486" fg:w="1"/><text x="100.0853%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.08%)</title><rect x="99.8471%" y="181" width="0.0824%" height="15" fill="rgb(223,4,10)" fg:x="8487" fg:w="7"/><text x="100.0971%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.04%)</title><rect x="99.9294%" y="181" width="0.0353%" height="15" fill="rgb(234,103,6)" fg:x="8494" fg:w="3"/><text x="100.1794%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.01%)</title><rect x="99.9647%" y="181" width="0.0118%" height="15" fill="rgb(227,97,0)" fg:x="8497" fg:w="1"/><text x="100.2147%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (1 samples, 0.01%)</title><rect x="99.9765%" y="181" width="0.0118%" height="15" fill="rgb(234,150,53)" fg:x="8498" fg:w="1"/><text x="100.2265%" y="191.50"></text></g><g><title>all (8,500 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="8500"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (8,500 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="8500"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>engine`main (8,500 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="8500"/><text x="0.2500%" y="287.50">engine`main</text></g><g><title>engine`std::rt::lang_start (8,500 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,25,53)" fg:x="0" fg:w="8500"/><text x="0.2500%" y="271.50">engine`std::rt::lang_start</text></g><g><title>engine`std::rt::lang_start_internal (8,500 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(210,40,34)" fg:x="0" fg:w="8500"/><text x="0.2500%" y="255.50">engine`std::rt::lang_start_internal</text></g><g><title>engine`std::rt::lang_start::_{{closure}} (8,500 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="8500"/><text x="0.2500%" y="239.50">engine`std::rt::lang_start::_{{closure}}</text></g><g><title>engine`std::sys_common::backtrace::__rust_begin_short_backtrace (8,500 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="8500"/><text x="0.2500%" y="223.50">engine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>engine`engine::main (8,500 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="8500"/><text x="0.2500%" y="207.50">engine`engine::main</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="99.9882%" y="181" width="0.0118%" height="15" fill="rgb(224,130,29)" fg:x="8499" fg:w="1"/><text x="100.2382%" y="191.50"></text></g></svg></svg>