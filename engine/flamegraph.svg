<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="2900"><g><title>engine`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;engine::moves::move_data::MoveItem&gt;&gt; (1 samples, 0.03%)</title><rect x="0.0000%" y="149" width="0.0345%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>engine`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;engine::moves::move_data::MoveItem&gt;&gt; (1 samples, 0.03%)</title><rect x="0.0000%" y="133" width="0.0345%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>engine`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="0.0000%" y="117" width="0.0345%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>engine`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="0.0000%" y="101" width="0.0345%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="0.0000%" y="85" width="0.0345%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.03%)</title><rect x="0.0000%" y="69" width="0.0345%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="79.50"></text></g><g><title>engine`engine::moves::perft::perft (2 samples, 0.07%)</title><rect x="0.0000%" y="181" width="0.0690%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="191.50"></text></g><g><title>engine`engine::moves::perft::_perft (2 samples, 0.07%)</title><rect x="0.0000%" y="165" width="0.0690%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="175.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (1 samples, 0.03%)</title><rect x="0.0345%" y="149" width="0.0345%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2845%" y="159.50"></text></g><g><title>engine`engine::state::bitboards::BitBoards::unset_by_bit_pos (1 samples, 0.03%)</title><rect x="0.0345%" y="133" width="0.0345%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2845%" y="143.50"></text></g><g><title>engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="1.0000%" y="133" width="0.1379%" height="15" fill="rgb(250,228,42)" fg:x="29" fg:w="4"/><text x="1.2500%" y="143.50"></text></g><g><title>engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (33 samples, 1.14%)</title><rect x="1.1379%" y="133" width="1.1379%" height="15" fill="rgb(240,193,28)" fg:x="33" fg:w="33"/><text x="1.3879%" y="143.50"></text></g><g><title>engine`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (12 samples, 0.41%)</title><rect x="1.8621%" y="117" width="0.4138%" height="15" fill="rgb(216,20,37)" fg:x="54" fg:w="12"/><text x="2.1121%" y="127.50"></text></g><g><title>engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (16 samples, 0.55%)</title><rect x="2.2759%" y="133" width="0.5517%" height="15" fill="rgb(206,188,39)" fg:x="66" fg:w="16"/><text x="2.5259%" y="143.50"></text></g><g><title>engine`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (4 samples, 0.14%)</title><rect x="2.6897%" y="117" width="0.1379%" height="15" fill="rgb(217,207,13)" fg:x="78" fg:w="4"/><text x="2.9397%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.07%)</title><rect x="3.5517%" y="53" width="0.0690%" height="15" fill="rgb(231,73,38)" fg:x="103" fg:w="2"/><text x="3.8017%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.03%)</title><rect x="3.6207%" y="53" width="0.0345%" height="15" fill="rgb(225,20,46)" fg:x="105" fg:w="1"/><text x="3.8707%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.03%)</title><rect x="3.6552%" y="37" width="0.0345%" height="15" fill="rgb(210,31,41)" fg:x="106" fg:w="1"/><text x="3.9052%" y="47.50"></text></g><g><title>engine`alloc::alloc::Global::alloc_impl (31 samples, 1.07%)</title><rect x="3.0000%" y="69" width="1.0690%" height="15" fill="rgb(221,200,47)" fg:x="87" fg:w="31"/><text x="3.2500%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.41%)</title><rect x="3.6552%" y="53" width="0.4138%" height="15" fill="rgb(226,26,5)" fg:x="106" fg:w="12"/><text x="3.9052%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.38%)</title><rect x="3.6897%" y="37" width="0.3793%" height="15" fill="rgb(249,33,26)" fg:x="107" fg:w="11"/><text x="3.9397%" y="47.50"></text></g><g><title>engine`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (33 samples, 1.14%)</title><rect x="2.9655%" y="85" width="1.1379%" height="15" fill="rgb(235,183,28)" fg:x="86" fg:w="33"/><text x="3.2155%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="4.0690%" y="69" width="0.0345%" height="15" fill="rgb(221,5,38)" fg:x="118" fg:w="1"/><text x="4.3190%" y="79.50"></text></g><g><title>engine`alloc::vec::from_elem (44 samples, 1.52%)</title><rect x="2.8276%" y="133" width="1.5172%" height="15" fill="rgb(247,18,42)" fg:x="82" fg:w="44"/><text x="3.0776%" y="143.50"></text></g><g><title>engine`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (43 samples, 1.48%)</title><rect x="2.8621%" y="117" width="1.4828%" height="15" fill="rgb(241,131,45)" fg:x="83" fg:w="43"/><text x="3.1121%" y="127.50"></text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (42 samples, 1.45%)</title><rect x="2.8966%" y="101" width="1.4483%" height="15" fill="rgb(249,31,29)" fg:x="84" fg:w="42"/><text x="3.1466%" y="111.50"></text></g><g><title>engine`core::alloc::layout::Layout::array::inner (7 samples, 0.24%)</title><rect x="4.1034%" y="85" width="0.2414%" height="15" fill="rgb(225,111,53)" fg:x="119" fg:w="7"/><text x="4.3534%" y="95.50"></text></g><g><title>engine`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.21%)</title><rect x="4.3448%" y="117" width="0.2069%" height="15" fill="rgb(238,160,17)" fg:x="126" fg:w="6"/><text x="4.5948%" y="127.50"></text></g><g><title>engine`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (7 samples, 0.24%)</title><rect x="4.3448%" y="133" width="0.2414%" height="15" fill="rgb(214,148,48)" fg:x="126" fg:w="7"/><text x="4.5948%" y="143.50"></text></g><g><title>engine`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.03%)</title><rect x="4.5517%" y="117" width="0.0345%" height="15" fill="rgb(232,36,49)" fg:x="132" fg:w="1"/><text x="4.8017%" y="127.50"></text></g><g><title>engine`core::ops::function::Fn::call (1 samples, 0.03%)</title><rect x="4.5862%" y="133" width="0.0345%" height="15" fill="rgb(209,103,24)" fg:x="133" fg:w="1"/><text x="4.8362%" y="143.50"></text></g><g><title>engine`engine::moves::precalculate::bishop::create_bishop_potential_moves_mask_on_the_fly (1 samples, 0.03%)</title><rect x="4.5862%" y="117" width="0.0345%" height="15" fill="rgb(229,88,8)" fg:x="133" fg:w="1"/><text x="4.8362%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="4.6897%" y="69" width="0.0345%" height="15" fill="rgb(213,181,19)" fg:x="136" fg:w="1"/><text x="4.9397%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="4.7241%" y="69" width="0.0345%" height="15" fill="rgb(254,191,54)" fg:x="137" fg:w="1"/><text x="4.9741%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.07%)</title><rect x="4.7586%" y="69" width="0.0690%" height="15" fill="rgb(241,83,37)" fg:x="138" fg:w="2"/><text x="5.0086%" y="79.50"></text></g><g><title>engine`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.24%)</title><rect x="4.6207%" y="85" width="0.2414%" height="15" fill="rgb(233,36,39)" fg:x="134" fg:w="7"/><text x="4.8707%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="4.8276%" y="69" width="0.0345%" height="15" fill="rgb(226,3,54)" fg:x="140" fg:w="1"/><text x="5.0776%" y="79.50"></text></g><g><title>engine`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="4.8621%" y="85" width="0.0345%" height="15" fill="rgb(245,192,40)" fg:x="141" fg:w="1"/><text x="5.1121%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="4.8966%" y="85" width="0.0345%" height="15" fill="rgb(238,167,29)" fg:x="142" fg:w="1"/><text x="5.1466%" y="95.50"></text></g><g><title>engine`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.34%)</title><rect x="4.6207%" y="101" width="0.3448%" height="15" fill="rgb(232,182,51)" fg:x="134" fg:w="10"/><text x="4.8707%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="4.9310%" y="85" width="0.0345%" height="15" fill="rgb(231,60,39)" fg:x="143" fg:w="1"/><text x="5.1810%" y="95.50"></text></g><g><title>engine`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (13 samples, 0.45%)</title><rect x="4.6207%" y="133" width="0.4483%" height="15" fill="rgb(208,69,12)" fg:x="134" fg:w="13"/><text x="4.8707%" y="143.50"></text></g><g><title>engine`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (13 samples, 0.45%)</title><rect x="4.6207%" y="117" width="0.4483%" height="15" fill="rgb(235,93,37)" fg:x="134" fg:w="13"/><text x="4.8707%" y="127.50"></text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.10%)</title><rect x="4.9655%" y="101" width="0.1034%" height="15" fill="rgb(213,116,39)" fg:x="144" fg:w="3"/><text x="5.2155%" y="111.50"></text></g><g><title>engine`&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Add&gt;::add (2 samples, 0.07%)</title><rect x="5.1034%" y="117" width="0.0690%" height="15" fill="rgb(222,207,29)" fg:x="148" fg:w="2"/><text x="5.3534%" y="127.50"></text></g><g><title>engine`&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::BitXorAssign&gt;::bitxor_assign (1 samples, 0.03%)</title><rect x="5.1724%" y="117" width="0.0345%" height="15" fill="rgb(206,96,30)" fg:x="150" fg:w="1"/><text x="5.4224%" y="127.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::generate_magic_number (22 samples, 0.76%)</title><rect x="5.0690%" y="133" width="0.7586%" height="15" fill="rgb(218,138,4)" fg:x="147" fg:w="22"/><text x="5.3190%" y="143.50"></text></g><g><title>engine`&lt;xorshift::xoroshiro128::Xoroshiro128 as rand::Rng&gt;::next_u64 (18 samples, 0.62%)</title><rect x="5.2069%" y="117" width="0.6207%" height="15" fill="rgb(250,191,14)" fg:x="151" fg:w="18"/><text x="5.4569%" y="127.50"></text></g><g><title>engine`xorshift::xoroshiro128::rotl (8 samples, 0.28%)</title><rect x="5.5517%" y="101" width="0.2759%" height="15" fill="rgb(239,60,40)" fg:x="161" fg:w="8"/><text x="5.8017%" y="111.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_bishop_magic_numbers (175 samples, 6.03%)</title><rect x="0.0690%" y="165" width="6.0345%" height="15" fill="rgb(206,27,48)" fg:x="2" fg:w="175"/><text x="0.3190%" y="175.50">engine`e..</text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_magic_number (175 samples, 6.03%)</title><rect x="0.0690%" y="149" width="6.0345%" height="15" fill="rgb(225,35,8)" fg:x="2" fg:w="175"/><text x="0.3190%" y="159.50">engine`e..</text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::hash_with_magic (8 samples, 0.28%)</title><rect x="5.8276%" y="133" width="0.2759%" height="15" fill="rgb(250,213,24)" fg:x="169" fg:w="8"/><text x="6.0776%" y="143.50"></text></g><g><title>engine`&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="6.1034%" y="149" width="0.0345%" height="15" fill="rgb(247,123,22)" fg:x="177" fg:w="1"/><text x="6.3534%" y="159.50"></text></g><g><title>engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.34%)</title><rect x="6.1379%" y="149" width="0.3448%" height="15" fill="rgb(231,138,38)" fg:x="178" fg:w="10"/><text x="6.3879%" y="159.50"></text></g><g><title>engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.07%)</title><rect x="6.4828%" y="149" width="0.0690%" height="15" fill="rgb(231,145,46)" fg:x="188" fg:w="2"/><text x="6.7328%" y="159.50"></text></g><g><title>engine`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="6.5517%" y="149" width="0.0690%" height="15" fill="rgb(251,118,11)" fg:x="190" fg:w="2"/><text x="6.8017%" y="159.50"></text></g><g><title>engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.52%)</title><rect x="18.8966%" y="133" width="0.5172%" height="15" fill="rgb(217,147,25)" fg:x="548" fg:w="15"/><text x="19.1466%" y="143.50"></text></g><g><title>engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (919 samples, 31.69%)</title><rect x="19.4138%" y="133" width="31.6897%" height="15" fill="rgb(247,81,37)" fg:x="563" fg:w="919"/><text x="19.6638%" y="143.50">engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::I..</text></g><g><title>engine`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (286 samples, 9.86%)</title><rect x="41.2414%" y="117" width="9.8621%" height="15" fill="rgb(209,12,38)" fg:x="1196" fg:w="286"/><text x="41.4914%" y="127.50">engine`&lt;usize ..</text></g><g><title>engine`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (315 samples, 10.86%)</title><rect x="51.1034%" y="133" width="10.8621%" height="15" fill="rgb(227,1,9)" fg:x="1482" fg:w="315"/><text x="51.3534%" y="143.50">engine`&lt;alloc::v..</text></g><g><title>engine`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (87 samples, 3.00%)</title><rect x="58.9655%" y="117" width="3.0000%" height="15" fill="rgb(248,47,43)" fg:x="1710" fg:w="87"/><text x="59.2155%" y="127.50">eng..</text></g><g><title>engine`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="61.9655%" y="133" width="0.0345%" height="15" fill="rgb(221,10,30)" fg:x="1797" fg:w="1"/><text x="62.2155%" y="143.50"></text></g><g><title>engine`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1 samples, 0.03%)</title><rect x="62.1724%" y="101" width="0.0345%" height="15" fill="rgb(210,229,1)" fg:x="1803" fg:w="1"/><text x="62.4224%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$calloc (4 samples, 0.14%)</title><rect x="62.8621%" y="69" width="0.1379%" height="15" fill="rgb(222,148,37)" fg:x="1823" fg:w="4"/><text x="63.1121%" y="79.50"></text></g><g><title>engine`__rdl_alloc_zeroed (3 samples, 0.10%)</title><rect x="63.0000%" y="69" width="0.1034%" height="15" fill="rgb(234,67,33)" fg:x="1827" fg:w="3"/><text x="63.2500%" y="79.50"></text></g><g><title>engine`__rdl_alloc_zeroed (1 samples, 0.03%)</title><rect x="64.5172%" y="53" width="0.0345%" height="15" fill="rgb(247,98,35)" fg:x="1871" fg:w="1"/><text x="64.7672%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.10%)</title><rect x="64.5517%" y="53" width="0.1034%" height="15" fill="rgb(247,138,52)" fg:x="1872" fg:w="3"/><text x="64.8017%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.07%)</title><rect x="64.6552%" y="53" width="0.0690%" height="15" fill="rgb(213,79,30)" fg:x="1875" fg:w="2"/><text x="64.9052%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (4 samples, 0.14%)</title><rect x="64.8966%" y="37" width="0.1379%" height="15" fill="rgb(246,177,23)" fg:x="1882" fg:w="4"/><text x="65.1466%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.17%)</title><rect x="65.0345%" y="37" width="0.1724%" height="15" fill="rgb(230,62,27)" fg:x="1886" fg:w="5"/><text x="65.2845%" y="47.50"></text></g><g><title>libsystem_platform.dylib`__bzero (28 samples, 0.97%)</title><rect x="65.2069%" y="37" width="0.9655%" height="15" fill="rgb(216,154,8)" fg:x="1891" fg:w="28"/><text x="65.4569%" y="47.50"></text></g><g><title>engine`alloc::alloc::Global::alloc_impl (375 samples, 12.93%)</title><rect x="63.1034%" y="69" width="12.9310%" height="15" fill="rgb(244,35,45)" fg:x="1830" fg:w="375"/><text x="63.3534%" y="79.50">engine`alloc::alloc..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (328 samples, 11.31%)</title><rect x="64.7241%" y="53" width="11.3103%" height="15" fill="rgb(251,115,12)" fg:x="1877" fg:w="328"/><text x="64.9741%" y="63.50">libsystem_malloc...</text></g><g><title>libsystem_platform.dylib`_platform_memset (286 samples, 9.86%)</title><rect x="66.1724%" y="37" width="9.8621%" height="15" fill="rgb(240,54,50)" fg:x="1919" fg:w="286"/><text x="66.4224%" y="47.50">libsystem_plat..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (6 samples, 0.21%)</title><rect x="76.0345%" y="69" width="0.2069%" height="15" fill="rgb(233,84,52)" fg:x="2205" fg:w="6"/><text x="76.2845%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.03%)</title><rect x="76.2414%" y="69" width="0.0345%" height="15" fill="rgb(207,117,47)" fg:x="2211" fg:w="1"/><text x="76.4914%" y="79.50"></text></g><g><title>engine`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (394 samples, 13.59%)</title><rect x="62.7586%" y="85" width="13.5862%" height="15" fill="rgb(249,43,39)" fg:x="1820" fg:w="394"/><text x="63.0086%" y="95.50">engine`&lt;alloc::alloc:..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.07%)</title><rect x="76.2759%" y="69" width="0.0690%" height="15" fill="rgb(209,38,44)" fg:x="2212" fg:w="2"/><text x="76.5259%" y="79.50"></text></g><g><title>engine`alloc::alloc::Global::alloc_impl (3 samples, 0.10%)</title><rect x="76.3448%" y="85" width="0.1034%" height="15" fill="rgb(236,212,23)" fg:x="2214" fg:w="3"/><text x="76.5948%" y="95.50"></text></g><g><title>engine`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (435 samples, 15.00%)</title><rect x="62.0690%" y="117" width="15.0000%" height="15" fill="rgb(242,79,21)" fg:x="1800" fg:w="435"/><text x="62.3190%" y="127.50">engine`&lt;T as alloc::vec..</text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (431 samples, 14.86%)</title><rect x="62.2069%" y="101" width="14.8621%" height="15" fill="rgb(211,96,35)" fg:x="1804" fg:w="431"/><text x="62.4569%" y="111.50">engine`alloc::raw_vec::..</text></g><g><title>engine`core::alloc::layout::Layout::array::inner (18 samples, 0.62%)</title><rect x="76.4483%" y="85" width="0.6207%" height="15" fill="rgb(253,215,40)" fg:x="2217" fg:w="18"/><text x="76.6983%" y="95.50"></text></g><g><title>engine`&lt;u64 as alloc::vec::is_zero::IsZero&gt;::is_zero (1 samples, 0.03%)</title><rect x="77.0690%" y="117" width="0.0345%" height="15" fill="rgb(211,81,21)" fg:x="2235" fg:w="1"/><text x="77.3190%" y="127.50"></text></g><g><title>engine`alloc::vec::from_elem (439 samples, 15.14%)</title><rect x="62.0000%" y="133" width="15.1379%" height="15" fill="rgb(208,190,38)" fg:x="1798" fg:w="439"/><text x="62.2500%" y="143.50">engine`alloc::vec::from..</text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.03%)</title><rect x="77.1034%" y="117" width="0.0345%" height="15" fill="rgb(235,213,38)" fg:x="2236" fg:w="1"/><text x="77.3534%" y="127.50"></text></g><g><title>engine`&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (179 samples, 6.17%)</title><rect x="79.3793%" y="117" width="6.1724%" height="15" fill="rgb(237,122,38)" fg:x="2302" fg:w="179"/><text x="79.6293%" y="127.50">engine`&lt;..</text></g><g><title>engine`&lt;i32 as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.07%)</title><rect x="85.5517%" y="117" width="0.0690%" height="15" fill="rgb(244,218,35)" fg:x="2481" fg:w="2"/><text x="85.8017%" y="127.50"></text></g><g><title>engine`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (279 samples, 9.62%)</title><rect x="77.1379%" y="133" width="9.6207%" height="15" fill="rgb(240,68,47)" fg:x="2237" fg:w="279"/><text x="77.3879%" y="143.50">engine`core::i..</text></g><g><title>engine`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (33 samples, 1.14%)</title><rect x="85.6207%" y="117" width="1.1379%" height="15" fill="rgb(210,16,53)" fg:x="2483" fg:w="33"/><text x="85.8707%" y="127.50"></text></g><g><title>engine`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="86.7931%" y="117" width="0.0690%" height="15" fill="rgb(235,124,12)" fg:x="2517" fg:w="2"/><text x="87.0431%" y="127.50"></text></g><g><title>engine`core::array::iter::_&lt;impl core::iter::traits::collect::IntoIterator for [T (1 samples, 0.03%)</title><rect x="86.8621%" y="117" width="0.0345%" height="15" fill="rgb(224,169,11)" fg:x="2519" fg:w="1"/><text x="87.1121%" y="127.50"></text></g><g><title> N]&gt;::into_iter (1 samples, 0.03%)</title><rect x="86.8621%" y="101" width="0.0345%" height="15" fill="rgb(250,166,2)" fg:x="2519" fg:w="1"/><text x="87.1121%" y="111.50"></text></g><g><title>engine`core::ops::function::Fn::call (18 samples, 0.62%)</title><rect x="86.7586%" y="133" width="0.6207%" height="15" fill="rgb(242,216,29)" fg:x="2516" fg:w="18"/><text x="87.0086%" y="143.50"></text></g><g><title>engine`engine::moves::precalculate::rook::create_rook_potential_moves_mask_on_the_fly (14 samples, 0.48%)</title><rect x="86.8966%" y="117" width="0.4828%" height="15" fill="rgb(230,116,27)" fg:x="2520" fg:w="14"/><text x="87.1466%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="88.0690%" y="69" width="0.0345%" height="15" fill="rgb(228,99,48)" fg:x="2554" fg:w="1"/><text x="88.3190%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.10%)</title><rect x="88.1034%" y="69" width="0.1034%" height="15" fill="rgb(253,11,6)" fg:x="2555" fg:w="3"/><text x="88.3534%" y="79.50"></text></g><g><title>engine`&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.55%)</title><rect x="87.9310%" y="85" width="0.5517%" height="15" fill="rgb(247,143,39)" fg:x="2550" fg:w="16"/><text x="88.1810%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.28%)</title><rect x="88.2069%" y="69" width="0.2759%" height="15" fill="rgb(236,97,10)" fg:x="2558" fg:w="8"/><text x="88.4569%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.17%)</title><rect x="88.4828%" y="85" width="0.1724%" height="15" fill="rgb(233,208,19)" fg:x="2566" fg:w="5"/><text x="88.7328%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.07%)</title><rect x="88.6552%" y="85" width="0.0690%" height="15" fill="rgb(216,164,2)" fg:x="2571" fg:w="2"/><text x="88.9052%" y="95.50"></text></g><g><title>engine`&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 1.41%)</title><rect x="87.4828%" y="101" width="1.4138%" height="15" fill="rgb(220,129,5)" fg:x="2537" fg:w="41"/><text x="87.7328%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.17%)</title><rect x="88.7241%" y="85" width="0.1724%" height="15" fill="rgb(242,17,10)" fg:x="2573" fg:w="5"/><text x="88.9741%" y="95.50"></text></g><g><title>engine`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u64&gt;&gt; (74 samples, 2.55%)</title><rect x="87.3793%" y="133" width="2.5517%" height="15" fill="rgb(242,107,0)" fg:x="2534" fg:w="74"/><text x="87.6293%" y="143.50">en..</text></g><g><title>engine`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u64&gt;&gt; (71 samples, 2.45%)</title><rect x="87.4828%" y="117" width="2.4483%" height="15" fill="rgb(251,28,31)" fg:x="2537" fg:w="71"/><text x="87.7328%" y="127.50">en..</text></g><g><title>engine`alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (30 samples, 1.03%)</title><rect x="88.8966%" y="101" width="1.0345%" height="15" fill="rgb(233,223,10)" fg:x="2578" fg:w="30"/><text x="89.1466%" y="111.50"></text></g><g><title>engine`&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::arith::Add&gt;::add (11 samples, 0.38%)</title><rect x="90.1034%" y="117" width="0.3793%" height="15" fill="rgb(215,21,27)" fg:x="2613" fg:w="11"/><text x="90.3534%" y="127.50"></text></g><g><title>engine`&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::BitXor&gt;::bitxor (4 samples, 0.14%)</title><rect x="90.4828%" y="117" width="0.1379%" height="15" fill="rgb(232,23,21)" fg:x="2624" fg:w="4"/><text x="90.7328%" y="127.50"></text></g><g><title>engine`&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::BitXorAssign&gt;::bitxor_assign (4 samples, 0.14%)</title><rect x="90.6207%" y="117" width="0.1379%" height="15" fill="rgb(244,5,23)" fg:x="2628" fg:w="4"/><text x="90.8707%" y="127.50"></text></g><g><title>engine`&lt;core::num::wrapping::Wrapping&lt;u64&gt; as core::ops::bit::Shl&lt;usize&gt;&gt;::shl (6 samples, 0.21%)</title><rect x="90.7586%" y="117" width="0.2069%" height="15" fill="rgb(226,81,46)" fg:x="2632" fg:w="6"/><text x="91.0086%" y="127.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::generate_magic_number (98 samples, 3.38%)</title><rect x="89.9310%" y="133" width="3.3793%" height="15" fill="rgb(247,70,30)" fg:x="2608" fg:w="98"/><text x="90.1810%" y="143.50">eng..</text></g><g><title>engine`&lt;xorshift::xoroshiro128::Xoroshiro128 as rand::Rng&gt;::next_u64 (68 samples, 2.34%)</title><rect x="90.9655%" y="117" width="2.3448%" height="15" fill="rgb(212,68,19)" fg:x="2638" fg:w="68"/><text x="91.2155%" y="127.50">e..</text></g><g><title>engine`xorshift::xoroshiro128::rotl (38 samples, 1.31%)</title><rect x="92.0000%" y="101" width="1.3103%" height="15" fill="rgb(240,187,13)" fg:x="2668" fg:w="38"/><text x="92.2500%" y="111.50"></text></g><g><title>engine`&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.03%)</title><rect x="93.5862%" y="101" width="0.0345%" height="15" fill="rgb(223,113,26)" fg:x="2714" fg:w="1"/><text x="93.8362%" y="111.50"></text></g><g><title>engine`core::convert::num::_&lt;impl core::convert::TryFrom&lt;u32&gt; for i8&gt;::try_from (2 samples, 0.07%)</title><rect x="93.6207%" y="101" width="0.0690%" height="15" fill="rgb(206,192,2)" fg:x="2715" fg:w="2"/><text x="93.8707%" y="111.50"></text></g><g><title>engine`&lt;u64 as engine::state::bitboards::BitBoard&gt;::pop_mut (8 samples, 0.28%)</title><rect x="93.4828%" y="117" width="0.2759%" height="15" fill="rgb(241,108,4)" fg:x="2711" fg:w="8"/><text x="93.7328%" y="127.50"></text></g><g><title>engine`core::result::Result&lt;T,E&gt;::unwrap (2 samples, 0.07%)</title><rect x="93.6897%" y="101" width="0.0690%" height="15" fill="rgb(247,173,49)" fg:x="2717" fg:w="2"/><text x="93.9397%" y="111.50"></text></g><g><title>engine`&lt;u64 as engine::state::bitboards::BitBoard&gt;::set (1 samples, 0.03%)</title><rect x="93.7586%" y="117" width="0.0345%" height="15" fill="rgb(224,114,35)" fg:x="2719" fg:w="1"/><text x="94.0086%" y="127.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::get_subset_of_mask_by_bit_set (16 samples, 0.55%)</title><rect x="93.3103%" y="133" width="0.5517%" height="15" fill="rgb(245,159,27)" fg:x="2706" fg:w="16"/><text x="93.5603%" y="143.50"></text></g><g><title>engine`core::iter::range::_&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.07%)</title><rect x="93.7931%" y="117" width="0.0690%" height="15" fill="rgb(245,172,44)" fg:x="2720" fg:w="2"/><text x="94.0431%" y="127.50"></text></g><g><title>engine`&lt;i8 as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.03%)</title><rect x="93.8276%" y="101" width="0.0345%" height="15" fill="rgb(236,23,11)" fg:x="2721" fg:w="1"/><text x="94.0776%" y="111.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_magic_number (2,702 samples, 93.17%)</title><rect x="6.6207%" y="149" width="93.1724%" height="15" fill="rgb(205,117,38)" fg:x="192" fg:w="2702"/><text x="6.8707%" y="159.50">engine`engine::moves::precalculate::magic_bitboards::find_magic_number</text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::hash_with_magic (172 samples, 5.93%)</title><rect x="93.8621%" y="133" width="5.9310%" height="15" fill="rgb(237,72,25)" fg:x="2722" fg:w="172"/><text x="94.1121%" y="143.50">engine`e..</text></g><g><title>engine`engine::moves::precalculate::cache::PrecalculatedCache::create (2,897 samples, 99.90%)</title><rect x="0.0690%" y="181" width="99.8966%" height="15" fill="rgb(244,70,9)" fg:x="2" fg:w="2897"/><text x="0.3190%" y="191.50">engine`engine::moves::precalculate::cache::PrecalculatedCache::create</text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_rook_magic_numbers (2,722 samples, 93.86%)</title><rect x="6.1034%" y="165" width="93.8621%" height="15" fill="rgb(217,125,39)" fg:x="177" fg:w="2722"/><text x="6.3534%" y="175.50">engine`engine::moves::precalculate::magic_bitboards::find_rook_magic_numbers</text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::hash_with_magic (5 samples, 0.17%)</title><rect x="99.7931%" y="149" width="0.1724%" height="15" fill="rgb(235,36,10)" fg:x="2894" fg:w="5"/><text x="100.0431%" y="159.50"></text></g><g><title>all (2,900 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (2,900 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>engine`main (2,900 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="303.50">engine`main</text></g><g><title>engine`std::rt::lang_start (2,900 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="287.50">engine`std::rt::lang_start</text></g><g><title>engine`std::rt::lang_start_internal (2,900 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="271.50">engine`std::rt::lang_start_internal</text></g><g><title>engine`std::rt::lang_start::_{{closure}} (2,900 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="255.50">engine`std::rt::lang_start::_{{closure}}</text></g><g><title>engine`std::sys_common::backtrace::__rust_begin_short_backtrace (2,900 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="239.50">engine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>engine`core::ops::function::FnOnce::call_once (2,900 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="223.50">engine`core::ops::function::FnOnce::call_once</text></g><g><title>engine`engine::main (2,900 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="2900"/><text x="0.2500%" y="207.50">engine`engine::main</text></g><g><title>engine`engine::state::game::GameState::from_fen (1 samples, 0.03%)</title><rect x="99.9655%" y="181" width="0.0345%" height="15" fill="rgb(230,59,30)" fg:x="2899" fg:w="1"/><text x="100.2155%" y="191.50"></text></g><g><title>engine`engine::fen::parse::parse_fen_enpassant (1 samples, 0.03%)</title><rect x="99.9655%" y="165" width="0.0345%" height="15" fill="rgb(209,121,21)" fg:x="2899" fg:w="1"/><text x="100.2155%" y="175.50"></text></g><g><title>engine`regex::regex::string::Regex::new (1 samples, 0.03%)</title><rect x="99.9655%" y="149" width="0.0345%" height="15" fill="rgb(220,109,13)" fg:x="2899" fg:w="1"/><text x="100.2155%" y="159.50"></text></g><g><title>engine`regex::builders::string::RegexBuilder::build (1 samples, 0.03%)</title><rect x="99.9655%" y="133" width="0.0345%" height="15" fill="rgb(232,18,1)" fg:x="2899" fg:w="1"/><text x="100.2155%" y="143.50"></text></g><g><title>engine`regex::builders::Builder::build_one_string (1 samples, 0.03%)</title><rect x="99.9655%" y="117" width="0.0345%" height="15" fill="rgb(215,41,42)" fg:x="2899" fg:w="1"/><text x="100.2155%" y="127.50"></text></g><g><title>engine`regex_automata::meta::regex::Builder::build (1 samples, 0.03%)</title><rect x="99.9655%" y="101" width="0.0345%" height="15" fill="rgb(224,123,36)" fg:x="2899" fg:w="1"/><text x="100.2155%" y="111.50"></text></g><g><title>engine`core::slice::_&lt;impl [T]&gt;::iter (1 samples, 0.03%)</title><rect x="99.9655%" y="85" width="0.0345%" height="15" fill="rgb(240,125,3)" fg:x="2899" fg:w="1"/><text x="100.2155%" y="95.50"></text></g></svg></svg>