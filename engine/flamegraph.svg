<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="4487"><g><title>engine`DYLD-STUB$$fcntl (1 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0223%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>engine`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="0.0223%" y="181" width="0.0446%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2723%" y="191.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (2 samples, 0.04%)</title><rect x="0.0891%" y="117" width="0.0446%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="2"/><text x="0.3391%" y="127.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (1 samples, 0.02%)</title><rect x="0.1114%" y="101" width="0.0223%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="1"/><text x="0.3614%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$free (5 samples, 0.11%)</title><rect x="1.1366%" y="101" width="0.1114%" height="15" fill="rgb(208,68,35)" fg:x="51" fg:w="5"/><text x="1.3866%" y="111.50"></text></g><g><title>engine`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="1.2480%" y="101" width="0.0223%" height="15" fill="rgb(232,128,0)" fg:x="56" fg:w="1"/><text x="1.4980%" y="111.50"></text></g><g><title>engine`__rdl_alloc (5 samples, 0.11%)</title><rect x="1.2703%" y="101" width="0.1114%" height="15" fill="rgb(207,160,47)" fg:x="57" fg:w="5"/><text x="1.5203%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (74 samples, 1.65%)</title><rect x="1.3818%" y="101" width="1.6492%" height="15" fill="rgb(228,23,34)" fg:x="62" fg:w="74"/><text x="1.6318%" y="111.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (22 samples, 0.49%)</title><rect x="2.5407%" y="85" width="0.4903%" height="15" fill="rgb(218,30,26)" fg:x="114" fg:w="22"/><text x="2.7907%" y="95.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (782 samples, 17.43%)</title><rect x="23.0666%" y="85" width="17.4281%" height="15" fill="rgb(220,122,19)" fg:x="1035" fg:w="782"/><text x="23.3166%" y="95.50">engine`engine::moves::attac..</text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (642 samples, 14.31%)</title><rect x="26.1868%" y="69" width="14.3080%" height="15" fill="rgb(250,228,42)" fg:x="1175" fg:w="642"/><text x="26.4368%" y="79.50">engine`engine::moves::..</text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (1 samples, 0.02%)</title><rect x="43.3474%" y="69" width="0.0223%" height="15" fill="rgb(240,193,28)" fg:x="1945" fg:w="1"/><text x="43.5974%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (76 samples, 1.69%)</title><rect x="43.3697%" y="69" width="1.6938%" height="15" fill="rgb(216,20,37)" fg:x="1946" fg:w="76"/><text x="43.6197%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::castling::generate_castling_moves (41 samples, 0.91%)</title><rect x="45.0635%" y="69" width="0.9138%" height="15" fill="rgb(206,188,39)" fg:x="2022" fg:w="41"/><text x="45.3135%" y="79.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (28 samples, 0.62%)</title><rect x="45.3532%" y="53" width="0.6240%" height="15" fill="rgb(217,207,13)" fg:x="2035" fg:w="28"/><text x="45.6032%" y="63.50"></text></g><g><title>engine`engine::moves::attacked::square_attacked::is_square_attacked (22 samples, 0.49%)</title><rect x="45.4870%" y="37" width="0.4903%" height="15" fill="rgb(231,73,38)" fg:x="2041" fg:w="22"/><text x="45.7370%" y="47.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (57 samples, 1.27%)</title><rect x="45.9773%" y="69" width="1.2703%" height="15" fill="rgb(225,20,46)" fg:x="2063" fg:w="57"/><text x="46.2273%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (177 samples, 3.94%)</title><rect x="47.2476%" y="69" width="3.9447%" height="15" fill="rgb(210,31,41)" fg:x="2120" fg:w="177"/><text x="47.4976%" y="79.50">engi..</text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (77 samples, 1.72%)</title><rect x="49.4763%" y="53" width="1.7161%" height="15" fill="rgb(221,200,47)" fg:x="2220" fg:w="77"/><text x="49.7263%" y="63.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves_helper (39 samples, 0.87%)</title><rect x="51.1923%" y="69" width="0.8692%" height="15" fill="rgb(226,26,5)" fg:x="2297" fg:w="39"/><text x="51.4423%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (77 samples, 1.72%)</title><rect x="52.0615%" y="69" width="1.7161%" height="15" fill="rgb(249,33,26)" fg:x="2336" fg:w="77"/><text x="52.3115%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (117 samples, 2.61%)</title><rect x="53.7776%" y="69" width="2.6075%" height="15" fill="rgb(235,183,28)" fg:x="2413" fg:w="117"/><text x="54.0276%" y="79.50">en..</text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (751 samples, 16.74%)</title><rect x="40.4948%" y="85" width="16.7372%" height="15" fill="rgb(221,5,38)" fg:x="1817" fg:w="751"/><text x="40.7448%" y="95.50">engine`engine::moves::pseu..</text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (38 samples, 0.85%)</title><rect x="56.3851%" y="69" width="0.8469%" height="15" fill="rgb(247,18,42)" fg:x="2530" fg:w="38"/><text x="56.6351%" y="79.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (3 samples, 0.07%)</title><rect x="57.2320%" y="85" width="0.0669%" height="15" fill="rgb(241,131,45)" fg:x="2568" fg:w="3"/><text x="57.4820%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (8 samples, 0.18%)</title><rect x="57.2989%" y="85" width="0.1783%" height="15" fill="rgb(249,31,29)" fg:x="2571" fg:w="8"/><text x="57.5489%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (4 samples, 0.09%)</title><rect x="57.4772%" y="85" width="0.0891%" height="15" fill="rgb(225,111,53)" fg:x="2579" fg:w="4"/><text x="57.7272%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (5 samples, 0.11%)</title><rect x="57.5663%" y="85" width="0.1114%" height="15" fill="rgb(238,160,17)" fg:x="2583" fg:w="5"/><text x="57.8163%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (6 samples, 0.13%)</title><rect x="57.6777%" y="85" width="0.1337%" height="15" fill="rgb(214,148,48)" fg:x="2588" fg:w="6"/><text x="57.9277%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (5 samples, 0.11%)</title><rect x="57.8115%" y="85" width="0.1114%" height="15" fill="rgb(232,36,49)" fg:x="2594" fg:w="5"/><text x="58.0615%" y="95.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (236 samples, 5.26%)</title><rect x="57.9229%" y="85" width="5.2596%" height="15" fill="rgb(209,103,24)" fg:x="2599" fg:w="236"/><text x="58.1729%" y="95.50">engine..</text></g><g><title>engine`engine::state::game::GameState::make_move (751 samples, 16.74%)</title><rect x="63.1825%" y="85" width="16.7372%" height="15" fill="rgb(229,88,8)" fg:x="2835" fg:w="751"/><text x="63.4325%" y="95.50">engine`engine::state::game..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="79.9198%" y="85" width="0.0223%" height="15" fill="rgb(213,181,19)" fg:x="3586" fg:w="1"/><text x="80.1698%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (11 samples, 0.25%)</title><rect x="79.9421%" y="85" width="0.2452%" height="15" fill="rgb(254,191,54)" fg:x="3587" fg:w="11"/><text x="80.1921%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_small (15 samples, 0.33%)</title><rect x="80.1872%" y="85" width="0.3343%" height="15" fill="rgb(241,83,37)" fg:x="3598" fg:w="15"/><text x="80.4372%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (21 samples, 0.47%)</title><rect x="80.5661%" y="69" width="0.4680%" height="15" fill="rgb(233,36,39)" fg:x="3615" fg:w="21"/><text x="80.8161%" y="79.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,508 samples, 78.18%)</title><rect x="3.0310%" y="101" width="78.1814%" height="15" fill="rgb(226,3,54)" fg:x="136" fg:w="3508"/><text x="3.2810%" y="111.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (31 samples, 0.69%)</title><rect x="80.5215%" y="85" width="0.6909%" height="15" fill="rgb(245,192,40)" fg:x="3613" fg:w="31"/><text x="80.7715%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 0.18%)</title><rect x="81.0341%" y="69" width="0.1783%" height="15" fill="rgb(238,167,29)" fg:x="3636" fg:w="8"/><text x="81.2841%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.04%)</title><rect x="81.1678%" y="53" width="0.0446%" height="15" fill="rgb(232,182,51)" fg:x="3642" fg:w="2"/><text x="81.4178%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="81.1901%" y="37" width="0.0223%" height="15" fill="rgb(231,60,39)" fg:x="3643" fg:w="1"/><text x="81.4401%" y="47.50"></text></g><g><title>engine`engine::moves::attacked::in_check::is_in_check (1 samples, 0.02%)</title><rect x="81.3461%" y="85" width="0.0223%" height="15" fill="rgb(208,69,12)" fg:x="3650" fg:w="1"/><text x="81.5961%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::bishop::generate_bishop_moves (3 samples, 0.07%)</title><rect x="81.3684%" y="85" width="0.0669%" height="15" fill="rgb(235,93,37)" fg:x="3651" fg:w="3"/><text x="81.6184%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (1 samples, 0.02%)</title><rect x="81.4353%" y="85" width="0.0223%" height="15" fill="rgb(213,116,39)" fg:x="3654" fg:w="1"/><text x="81.6853%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_attack_moves (6 samples, 0.13%)</title><rect x="81.4575%" y="85" width="0.1337%" height="15" fill="rgb(222,207,29)" fg:x="3655" fg:w="6"/><text x="81.7075%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (1 samples, 0.02%)</title><rect x="81.5913%" y="85" width="0.0223%" height="15" fill="rgb(206,96,30)" fg:x="3661" fg:w="1"/><text x="81.8413%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (7 samples, 0.16%)</title><rect x="81.6136%" y="85" width="0.1560%" height="15" fill="rgb(218,138,4)" fg:x="3662" fg:w="7"/><text x="81.8636%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (27 samples, 0.60%)</title><rect x="81.2124%" y="101" width="0.6017%" height="15" fill="rgb(250,191,14)" fg:x="3644" fg:w="27"/><text x="81.4624%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::rook::generate_rook_moves (2 samples, 0.04%)</title><rect x="81.7696%" y="85" width="0.0446%" height="15" fill="rgb(239,60,40)" fg:x="3669" fg:w="2"/><text x="82.0196%" y="95.50"></text></g><g><title>engine`engine::moves::pseudolegal::king::generate_king_moves (1 samples, 0.02%)</title><rect x="81.8141%" y="101" width="0.0223%" height="15" fill="rgb(206,27,48)" fg:x="3671" fg:w="1"/><text x="82.0641%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_double_forward_moves (1 samples, 0.02%)</title><rect x="81.8364%" y="101" width="0.0223%" height="15" fill="rgb(225,35,8)" fg:x="3672" fg:w="1"/><text x="82.0864%" y="111.50"></text></g><g><title>engine`engine::state::boards::Boards::set_or_replace_piece_by_bit_pos (13 samples, 0.29%)</title><rect x="81.8587%" y="101" width="0.2897%" height="15" fill="rgb(250,213,24)" fg:x="3673" fg:w="13"/><text x="82.1087%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (236 samples, 5.26%)</title><rect x="82.1484%" y="101" width="5.2596%" height="15" fill="rgb(247,123,22)" fg:x="3686" fg:w="236"/><text x="82.3984%" y="111.50">engine..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9 samples, 0.20%)</title><rect x="87.4081%" y="101" width="0.2006%" height="15" fill="rgb(231,138,38)" fg:x="3922" fg:w="9"/><text x="87.6581%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.16%)</title><rect x="87.6086%" y="101" width="0.1560%" height="15" fill="rgb(231,145,46)" fg:x="3931" fg:w="7"/><text x="87.8586%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.02%)</title><rect x="87.7647%" y="101" width="0.0223%" height="15" fill="rgb(251,118,11)" fg:x="3938" fg:w="1"/><text x="88.0147%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.27%)</title><rect x="87.7869%" y="101" width="0.2674%" height="15" fill="rgb(217,147,25)" fg:x="3939" fg:w="12"/><text x="88.0369%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="88.0544%" y="101" width="0.0223%" height="15" fill="rgb(247,81,37)" fg:x="3951" fg:w="1"/><text x="88.3044%" y="111.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,949 samples, 88.01%)</title><rect x="0.1337%" y="117" width="88.0098%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="3949"/><text x="0.3837%" y="127.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="88.0767%" y="101" width="0.0669%" height="15" fill="rgb(227,1,9)" fg:x="3952" fg:w="3"/><text x="88.3267%" y="111.50"></text></g><g><title>engine`engine::moves::pseudolegal::all::generate_pseudolegal_moves (1 samples, 0.02%)</title><rect x="88.1435%" y="117" width="0.0223%" height="15" fill="rgb(248,47,43)" fg:x="3955" fg:w="1"/><text x="88.3935%" y="127.50"></text></g><g><title>engine`engine::moves::pseudolegal::pawn::generate_pawn_single_forward_moves (1 samples, 0.02%)</title><rect x="88.1435%" y="101" width="0.0223%" height="15" fill="rgb(221,10,30)" fg:x="3955" fg:w="1"/><text x="88.3935%" y="111.50"></text></g><g><title>engine`engine::state::game::GameState::make_move (16 samples, 0.36%)</title><rect x="88.1658%" y="117" width="0.3566%" height="15" fill="rgb(210,229,1)" fg:x="3956" fg:w="16"/><text x="88.4158%" y="127.50"></text></g><g><title>engine`engine::moves::perft::_perft (3,970 samples, 88.48%)</title><rect x="0.0669%" y="133" width="88.4778%" height="15" fill="rgb(222,148,37)" fg:x="3" fg:w="3970"/><text x="0.3169%" y="143.50">engine`engine::moves::perft::_perft</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="88.5224%" y="117" width="0.0223%" height="15" fill="rgb(234,67,33)" fg:x="3972" fg:w="1"/><text x="88.7724%" y="127.50"></text></g><g><title>engine`engine::moves::perft::perft (3,972 samples, 88.52%)</title><rect x="0.0669%" y="181" width="88.5224%" height="15" fill="rgb(247,98,35)" fg:x="3" fg:w="3972"/><text x="0.3169%" y="191.50">engine`engine::moves::perft::perft</text></g><g><title>engine`engine::moves::perft::_perft (3,972 samples, 88.52%)</title><rect x="0.0669%" y="165" width="88.5224%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="3972"/><text x="0.3169%" y="175.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::moves::perft::_perft (3,972 samples, 88.52%)</title><rect x="0.0669%" y="149" width="88.5224%" height="15" fill="rgb(213,79,30)" fg:x="3" fg:w="3972"/><text x="0.3169%" y="159.50">engine`engine::moves::perft::_perft</text></g><g><title>engine`engine::state::game::GameState::make_move (2 samples, 0.04%)</title><rect x="88.5447%" y="133" width="0.0446%" height="15" fill="rgb(246,177,23)" fg:x="3973" fg:w="2"/><text x="88.7947%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="88.6338%" y="165" width="0.0223%" height="15" fill="rgb(230,62,27)" fg:x="3977" fg:w="1"/><text x="88.8838%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.04%)</title><rect x="88.6784%" y="149" width="0.0446%" height="15" fill="rgb(216,154,8)" fg:x="3979" fg:w="2"/><text x="88.9284%" y="159.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_bishop_magic_numbers (10 samples, 0.22%)</title><rect x="88.5893%" y="181" width="0.2229%" height="15" fill="rgb(244,35,45)" fg:x="3975" fg:w="10"/><text x="88.8393%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.16%)</title><rect x="88.6561%" y="165" width="0.1560%" height="15" fill="rgb(251,115,12)" fg:x="3978" fg:w="7"/><text x="88.9061%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.09%)</title><rect x="88.7230%" y="149" width="0.0891%" height="15" fill="rgb(240,54,50)" fg:x="3981" fg:w="4"/><text x="88.9730%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="90.5059%" y="165" width="0.0446%" height="15" fill="rgb(233,84,52)" fg:x="4061" fg:w="2"/><text x="90.7559%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.16%)</title><rect x="90.5505%" y="165" width="0.1560%" height="15" fill="rgb(207,117,47)" fg:x="4063" fg:w="7"/><text x="90.8005%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (9 samples, 0.20%)</title><rect x="90.7065%" y="165" width="0.2006%" height="15" fill="rgb(249,43,39)" fg:x="4070" fg:w="9"/><text x="90.9565%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (7 samples, 0.16%)</title><rect x="90.9071%" y="165" width="0.1560%" height="15" fill="rgb(209,38,44)" fg:x="4079" fg:w="7"/><text x="91.1571%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.11%)</title><rect x="91.0631%" y="165" width="0.1114%" height="15" fill="rgb(236,212,23)" fg:x="4086" fg:w="5"/><text x="91.3131%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (8 samples, 0.18%)</title><rect x="91.2191%" y="149" width="0.1783%" height="15" fill="rgb(242,79,21)" fg:x="4093" fg:w="8"/><text x="91.4691%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.13%)</title><rect x="91.3974%" y="149" width="0.1337%" height="15" fill="rgb(211,96,35)" fg:x="4101" fg:w="6"/><text x="91.6474%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (1 samples, 0.02%)</title><rect x="91.5088%" y="133" width="0.0223%" height="15" fill="rgb(253,215,40)" fg:x="4106" fg:w="1"/><text x="91.7588%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="91.5088%" y="117" width="0.0223%" height="15" fill="rgb(211,81,21)" fg:x="4106" fg:w="1"/><text x="91.7588%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (76 samples, 1.69%)</title><rect x="91.5311%" y="149" width="1.6938%" height="15" fill="rgb(208,190,38)" fg:x="4107" fg:w="76"/><text x="91.7811%" y="159.50"></text></g><g><title>engine`engine::moves::precalculate::magic_bitboards::find_rook_magic_numbers (478 samples, 10.65%)</title><rect x="88.8121%" y="181" width="10.6530%" height="15" fill="rgb(235,213,38)" fg:x="3985" fg:w="478"/><text x="89.0621%" y="191.50">engine`engine::m..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (372 samples, 8.29%)</title><rect x="91.1745%" y="165" width="8.2906%" height="15" fill="rgb(237,122,38)" fg:x="4091" fg:w="372"/><text x="91.4245%" y="175.50">libsystem_ma..</text></g><g><title>libsystem_platform.dylib`_platform_memset (280 samples, 6.24%)</title><rect x="93.2249%" y="149" width="6.2402%" height="15" fill="rgb(244,218,35)" fg:x="4183" fg:w="280"/><text x="93.4749%" y="159.50">libsyste..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (10 samples, 0.22%)</title><rect x="99.4651%" y="181" width="0.2229%" height="15" fill="rgb(240,68,47)" fg:x="4463" fg:w="10"/><text x="99.7151%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="99.6880%" y="181" width="0.0446%" height="15" fill="rgb(210,16,53)" fg:x="4473" fg:w="2"/><text x="99.9380%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (9 samples, 0.20%)</title><rect x="99.7326%" y="181" width="0.2006%" height="15" fill="rgb(235,124,12)" fg:x="4475" fg:w="9"/><text x="99.9826%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_calloc (2 samples, 0.04%)</title><rect x="99.9331%" y="181" width="0.0446%" height="15" fill="rgb(224,169,11)" fg:x="4484" fg:w="2"/><text x="100.1831%" y="191.50"></text></g><g><title>all (4,487 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="4487"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (4,487 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="4487"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>engine`main (4,487 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,116,27)" fg:x="0" fg:w="4487"/><text x="0.2500%" y="287.50">engine`main</text></g><g><title>engine`std::rt::lang_start (4,487 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="4487"/><text x="0.2500%" y="271.50">engine`std::rt::lang_start</text></g><g><title>engine`std::rt::lang_start_internal (4,486 samples, 99.98%)</title><rect x="0.0223%" y="245" width="99.9777%" height="15" fill="rgb(253,11,6)" fg:x="1" fg:w="4486"/><text x="0.2723%" y="255.50">engine`std::rt::lang_start_internal</text></g><g><title>engine`std::rt::lang_start::_{{closure}} (4,486 samples, 99.98%)</title><rect x="0.0223%" y="229" width="99.9777%" height="15" fill="rgb(247,143,39)" fg:x="1" fg:w="4486"/><text x="0.2723%" y="239.50">engine`std::rt::lang_start::_{{closure}}</text></g><g><title>engine`std::sys_common::backtrace::__rust_begin_short_backtrace (4,486 samples, 99.98%)</title><rect x="0.0223%" y="213" width="99.9777%" height="15" fill="rgb(236,97,10)" fg:x="1" fg:w="4486"/><text x="0.2723%" y="223.50">engine`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>engine`engine::main (4,486 samples, 99.98%)</title><rect x="0.0223%" y="197" width="99.9777%" height="15" fill="rgb(233,208,19)" fg:x="1" fg:w="4486"/><text x="0.2723%" y="207.50">engine`engine::main</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.9777%" y="181" width="0.0223%" height="15" fill="rgb(216,164,2)" fg:x="4486" fg:w="1"/><text x="100.2277%" y="191.50"></text></g></svg></svg>